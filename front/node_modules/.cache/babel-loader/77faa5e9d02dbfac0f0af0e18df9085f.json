{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadComments),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadComments),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPosts),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUserPosts),\n    _marked12 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked13 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, delay, call } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE } from \"../reducers/post\";\nimport axios from \"axios\";\n\nfunction addPostAPI(postData) {\n  return axios.post(\"/post\", postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), action.data.comment, {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: result.data\n            }\n          });\n\n        case 6:\n          _context3.next = 12;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadCommentsAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: result.data\n            }\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nfunction loadMainPostsAPI() {\n  return axios.get(\"/posts\");\n}\n\nfunction loadMainPosts() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n} ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(\"/hashtag/\".concat(tag));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(loadHashtagPostsAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 12;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 12;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context9.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n} ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context11.next = 12;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          _context11.next = 12;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context11.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n} ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadMainPosts), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts)]);\n\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13);\n}","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","loadComments","watchLoadComments","loadMainPosts","watchLoadMainPosts","loadHashtagPosts","watchLoadHashtagPosts","loadUserPosts","watchLoadUserPosts","postSaga","all","fork","takeLatest","put","delay","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","axios","addPostAPI","postData","post","withCredentials","action","data","result","type","error","addCommentAPI","postId","comment","content","loadCommentsAPI","get","comments","loadMainPostsAPI","loadHashtagPostsAPI","tag","loadUserPostsAPI","id"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from \"redux-saga/effects\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  LOAD_MAIN_POSTS_REQUEST,\n  LOAD_MAIN_POSTS_SUCCESS,\n  LOAD_MAIN_POSTS_FAILURE,\n  LOAD_HASHTAG_POSTS_REQUEST,\n  LOAD_HASHTAG_POSTS_SUCCESS,\n  LOAD_HASHTAG_POSTS_FAILURE,\n  LOAD_USER_POSTS_REQUEST,\n  LOAD_USER_POSTS_SUCCESS,\n  LOAD_USER_POSTS_FAILURE,\n  LOAD_COMMENTS_REQUEST,\n  LOAD_COMMENTS_SUCCESS,\n  LOAD_COMMENTS_FAILURE\n} from \"../reducers/post\";\nimport axios from \"axios\";\n\nfunction addPostAPI(postData) {\n  return axios.post(\"/post\", postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\n    `/post/${data.postId}/comment`,\n    action.data.comment,\n    { content: data.content },\n    {\n      withCredentials: true\n    }\n  );\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nfunction loadMainPostsAPI() {\n  return axios.get(\"/posts\");\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${tag}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadMainPosts),\n    fork(watchAddComment),\n    fork(watchLoadComments),\n    fork(watchLoadHashtagPosts),\n    fork(watchLoadUserPosts)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}