{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List } from \"antd\";\nimport Link from \"next/link\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST, LOAD_COMMENTS_REQUEST, UNLIKE_POST_REQUEST, LIKE_POST_REQUEST } from \"../reducers/post\";\nimport PostImages from \"./PostImages\";\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentFormOpened = _useState2[0],\n      setCommentFormOpened = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      commentText = _useState4[0],\n      setCommentText = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText(\"\");\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert(\"Please login first\");\n    }\n\n    if (post.Likers && post.Likers.find(function (v) {\n      return v.id === me.id;\n    })) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id]);\n  return React.createElement(\"div\", null, React.createElement(Card, {\n    key: +post.createdAt // cover={post.Images[0] && <img alt=\"example\" src={`http://localhost:3306/`+post.Images[0].src} />}\n    ,\n    cover: post.Images[0] && React.createElement(PostImages, {\n      images: post.Images\n    }),\n    actions: [React.createElement(Icon, {\n      type: \"retweet\",\n      key: \"retweet\"\n    }), React.createElement(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: 'twoTone',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), React.createElement(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), React.createElement(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: React.createElement(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, React.createElement(Card.Meta, {\n    avatar: React.createElement(Link, {\n      href: {\n        pathname: \"/user\",\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, React.createElement(\"a\", null, React.createElement(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: React.createElement(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(function (v) {\n      if (v.match(/#[^\\s]+/)) {\n        return React.createElement(Link, {\n          href: {\n            pathname: \"/hashtag\",\n            query: {\n              tag: v.slice(1)\n            }\n          },\n          as: \"/hashtag/\".concat(v.slice(1)),\n          key: v\n        }, React.createElement(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && React.createElement(React.Fragment, null, React.createElement(Form, {\n    onSubmit: onSubmitComment\n  }, React.createElement(Form.Item, null, React.createElement(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), React.createElement(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return React.createElement(\"li\", null, React.createElement(Comment, {\n        author: item.User.nickname,\n        avatar: React.createElement(Link, {\n          href: {\n            pathname: \"/user\",\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id)\n        }, React.createElement(\"a\", null, React.createElement(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/components/PostCard.js"],"names":["React","useCallback","useEffect","useState","Avatar","Button","Card","Comment","Form","Icon","Input","List","Link","PropTypes","useDispatch","useSelector","ADD_COMMENT_REQUEST","LOAD_COMMENTS_REQUEST","UNLIKE_POST_REQUEST","LIKE_POST_REQUEST","PostImages","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","onToggleComment","prev","type","data","id","onSubmitComment","e","preventDefault","alert","postId","content","onChangeCommentText","target","value","onToggleLike","Likers","find","v","createdAt","Images","pathname","query","User","nickname","split","map","match","tag","slice","Comments","length","item","propTypes","shape","object","string","img","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List } from \"antd\";\nimport Link from \"next/link\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  ADD_COMMENT_REQUEST,\n  LOAD_COMMENTS_REQUEST,\n  UNLIKE_POST_REQUEST,\n  LIKE_POST_REQUEST\n} from \"../reducers/post\";\nimport PostImages from \"./PostImages\";\n\nconst PostCard = ({ post }) => {\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  const [commentText, setCommentText] = useState(\"\");\n  const { me } = useSelector(state => state.user);\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []);\n\n  const onSubmitComment = useCallback(\n    e => {\n      e.preventDefault();\n      if (!me) {\n        return alert(\"로그인이 필요합니다.\");\n      }\n      return dispatch({\n        type: ADD_COMMENT_REQUEST,\n        data: {\n          postId: post.id,\n          content: commentText\n        }\n      });\n    },\n    [me && me.id, commentText]\n  );\n\n  useEffect(() => {\n    setCommentText(\"\");\n  }, [commentAdded === true]);\n\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n\n  const onToggleLike = useCallback(() => {\n    if (!me) {\n      return alert(\"Please login first\");\n    }\n    if (post.Likers && post.Likers.find(v => v.id === me.id)) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id]);\n  return (\n    <div>\n      <Card\n        key={+post.createdAt}\n        // cover={post.Images[0] && <img alt=\"example\" src={`http://localhost:3306/`+post.Images[0].src} />}\n        cover={post.Images[0] && <PostImages images={post.Images} />}\n        actions={[\n          <Icon type=\"retweet\" key=\"retweet\" />,\n          <Icon type=\"heart\" key=\"heart\" theme={'twoTone'} twoToneColor=\"#eb2f96\" onClick={onToggleLike} />,\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\n          <Icon type=\"ellipsis\" key=\"ellipsis\" />\n        ]}\n        extra={<Button>팔로우</Button>}\n      >\n        <Card.Meta\n          avatar={\n            <Link\n              href={{ pathname: \"/user\", query: { id: post.User.id } }}\n              as={`/user/${post.User.id}`}\n            >\n              <a>\n                <Avatar>{post.User.nickname[0]}</Avatar>\n              </a>\n            </Link>\n          }\n          title={post.User.nickname}\n          description={\n            <div>\n              {post.content.split(/(#[^\\s]+)/g).map(v => {\n                if (v.match(/#[^\\s]+/)) {\n                  return (\n                    <Link\n                      href={{\n                        pathname: \"/hashtag\",\n                        query: { tag: v.slice(1) }\n                      }}\n                      as={`/hashtag/${v.slice(1)}`}\n                      key={v}\n                    >\n                      <a>{v}</a>\n                    </Link>\n                  );\n                }\n                return v;\n              })}\n            </div>\n          }\n        />\n      </Card>\n      {commentFormOpened && (\n        <>\n          <Form onSubmit={onSubmitComment}>\n            <Form.Item>\n              <Input.TextArea\n                rows={4}\n                value={commentText}\n                onChange={onChangeCommentText}\n              />\n            </Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\n              삐약\n            </Button>\n          </Form>\n          <List\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments || []}\n            renderItem={item => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={\n                    <Link\n                      href={{ pathname: \"/user\", query: { id: item.User.id } }}\n                      as={`/user/${item.User.id}`}\n                    >\n                      <a>\n                        <Avatar>{item.User.nickname[0]}</Avatar>\n                      </a>\n                    </Link>\n                  }\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  }).isRequired\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}