{"ast":null,"code":"var _jsxFileName = \"/Users/kangsung-yun/react-sns/front/pages/index.js\";\nimport React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\"; // import { LOG_IN, LOG_OUT, loginAction, logoutAction } from \"../reducers/user\";\n\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\n\nvar Home = function Home() {\n  var dispatch = useDispatch(); // 액션을 디스패치\n\n  /*\n  리렌더링이 자주 일어나는 것을 방지하기 위해 스테이트를 잘게 쪼갤수도 있다 (최적화)\n  const user = useSelector(state => state.user.user);\n  const isLoggedIn = useSelector(state => state.user.isLoggedIn); \n  */\n  // const { user, isLoggedIn } = useSelector(state => state.user); // user 스테이트를 가져옴 mapStateToProps 역할\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts; // useEffect(() => {\n  //   // dispatch(loginAction);\n  //   // dispatch(logoutAction);\n  // }, []);\n\n\n  useEffect(function () {\n    dispatch({\n      type: LOAD_MAIN_POSTS_REQUEST\n    });\n  }, []);\n  return (// <div>\n    //   {user ? (\n    //     <div>{user.nickname} logged in successfully</div>\n    //   ) : (\n    //     <div>logged out successfully</div>\n    //   )}\n    //   {isLoggedIn && <PostForm />}\n    //   {mainPosts.map(c => {\n    //     return <PostCard key={c} post={c} />;\n    //   })}\n    // </div>\n    React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, me && React.createElement(PostForm, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }), mainPosts.map(function (c) {\n      return React.createElement(PostCard, {\n        key: c,\n        post: c,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      });\n    }))\n  );\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","PostForm","PostCard","LOAD_MAIN_POSTS_REQUEST","Home","dispatch","state","user","me","post","mainPosts","type","map","c"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB,C,CACA;;AACA,SAASC,uBAAT,QAAwC,kBAAxC;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,MAAMC,QAAQ,GAAGN,WAAW,EAA5B,CADiB,CACe;;AAEhC;;;;;AAMA;;AATiB,qBAUFC,WAAW,CAAC,UAAAM,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CAVT;AAAA,MAUTC,EAVS,gBAUTA,EAVS;;AAAA,sBAWKR,WAAW,CAAC,UAAAM,KAAK;AAAA,WAAIA,KAAK,CAACG,IAAV;AAAA,GAAN,CAXhB;AAAA,MAWTC,SAXS,iBAWTA,SAXS,EAcjB;AACA;AACA;AACA;;;AAEAZ,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,QAAQ,CAAC;AACPM,MAAAA,IAAI,EAAER;AADC,KAAD,CAAR;AAGD,GAJQ,EAIN,EAJM,CAAT;AAMA,SACE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGK,EAAE,IAAI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADT,EAEGE,SAAS,CAACE,GAAV,CAAc,UAAAC,CAAC,EAAI;AAClB,aAAO,oBAAC,QAAD;AAAU,QAAA,GAAG,EAAEA,CAAf;AAAkB,QAAA,IAAI,EAAEA,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFA,CAFH;AAZF;AAmBD,CA5CD;;AA8CA,eAAeT,IAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\n// import { LOG_IN, LOG_OUT, loginAction, logoutAction } from \"../reducers/user\";\nimport { LOAD_MAIN_POSTS_REQUEST } from '../reducers/post';\n\nconst Home = () => {\n  const dispatch = useDispatch(); // 액션을 디스패치\n\n  /*\n  리렌더링이 자주 일어나는 것을 방지하기 위해 스테이트를 잘게 쪼갤수도 있다 (최적화)\n  const user = useSelector(state => state.user.user);\n  const isLoggedIn = useSelector(state => state.user.isLoggedIn); \n  */\n\n  // const { user, isLoggedIn } = useSelector(state => state.user); // user 스테이트를 가져옴 mapStateToProps 역할\n  const { me } = useSelector(state => state.user);\n  const { mainPosts } = useSelector(state => state.post);\n  \n\n  // useEffect(() => {\n  //   // dispatch(loginAction);\n  //   // dispatch(logoutAction);\n  // }, []);\n\n  useEffect(() => {\n    dispatch({\n      type: LOAD_MAIN_POSTS_REQUEST,\n    });\n  }, []);\n\n  return (\n    // <div>\n    //   {user ? (\n    //     <div>{user.nickname} logged in successfully</div>\n    //   ) : (\n    //     <div>logged out successfully</div>\n    //   )}\n    //   {isLoggedIn && <PostForm />}\n    //   {mainPosts.map(c => {\n    //     return <PostCard key={c} post={c} />;\n    //   })}\n    // </div>\n    <div>\n      {me && <PostForm />}\n      {mainPosts.map(c => {\n        return <PostCard key={c} post={c} />;\n      })}\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}