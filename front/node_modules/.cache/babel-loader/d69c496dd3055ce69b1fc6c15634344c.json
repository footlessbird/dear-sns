{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE } from \"../reducers/post\";\nimport axios from \"axios\";\n\nfunction addPostAPI() {}\n\nfunction addPost() {\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            type: ADD_POST_SUCCESS\n          });\n\n        case 5:\n          _context.next = 11;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 11;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI() {}\n\nfunction addComment() {\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return delay(2000);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            type: ADD_COMMENT_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 11;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 11;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 11:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","postSaga","all","fork","takeLatest","put","delay","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","axios","addPostAPI","type","error","addCommentAPI","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_COMMENT_REQUEST"],"mappings":";;;;yBAWUA,O;;;yBAcAC,Y;;;yBAOAC,U;;;yBAcAC,e;;;yBAIeC,Q;;AAlDzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,GAAhC,EAAqCC,KAArC,QAAkD,oBAAlD;AACA,SACEC,gBADF,EAEEC,gBAFF,EAGEC,gBAHF,QAIO,kBAJP;AAKA,OAAOC,KAAP,MAAkB,OAAlB;;AAEA,SAASC,UAAT,GAAsB,CACrB;;AAED,SAAUd,OAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMS,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAGI,iBAAMD,GAAG,CAAC;AACRO,YAAAA,IAAI,EAAEJ;AADE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOI,iBAAMH,GAAG,CAAC;AACRO,YAAAA,IAAI,EAAEH,gBADE;AAERI,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUf,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMM,UAAU,CAACG,gBAAD,EAAmBV,OAAnB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAASiB,aAAT,GAAyB,CACxB;;AAED,SAAUf,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMO,KAAK,CAAC,IAAD,CAAX;;AAFJ;AAAA;AAGI,iBAAMD,GAAG,CAAC;AACRO,YAAAA,IAAI,EAAEG;AADE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAOI,iBAAMV,GAAG,CAAC;AACRO,YAAAA,IAAI,EAAEI,mBADE;AAERH,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAPJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUb,eAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMI,UAAU,CAACa,mBAAD,EAAsBlB,UAAtB,CAAhB;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACL,YAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, fork, takeLatest, put, delay } from \"redux-saga/effects\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE\n} from \"../reducers/post\";\nimport axios from \"axios\";\n\nfunction addPostAPI() {\n}\n\nfunction* addPost() {\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_POST_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction addCommentAPI() {\n}\n\nfunction* addComment() {\n  try {\n    yield delay(2000);\n    yield put({\n      type: ADD_COMMENT_SUCCESS\n    });\n  } catch (e) {\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\nexport default function* postSaga() {\n  yield all([fork(watchAddPost)]);\n}\n"]},"metadata":{},"sourceType":"module"}