{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/kangsung-yun/react-sns/front/components/PostCard.js\";\nimport React, { useState, useCallback, useEffect } from \"react\";\nimport { Button, Avatar, Card, Icon, Form, Input, List, Comment } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentFormOpened = _useState2[0],\n      setCommentFormOpened = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      commentText = _useState4[0],\n      setCommentText = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var dispatch = useDispatch();\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    }); // 댓글창이 열려있으면 닫고 닫혀있으면 열 수 있도록\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert(\"Please sign in to comment\");\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  useEffect(function () {\n    return function () {\n      setCommentText('');\n    };\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, React.createElement(Card, {\n    key: +post.createdAt,\n    cover: post.img && React.createElement(\"img\", {\n      src: post.img,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }),\n    actions: [React.createElement(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49\n      },\n      __self: this\n    }), React.createElement(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    }), React.createElement(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    }), React.createElement(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    })],\n    extra: React.createElement(Button, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, \"Follow\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(Card.Meta, {\n    avatar: React.createElement(Avatar, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: post.content,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })), commentFormOpened && React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Form, {\n    onSubmit: onSubmitComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  })), React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"Comment\")), React.createElement(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" comments\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return React.createElement(\"li\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      }, React.createElement(Comment, {\n        author: item.User.nickname,\n        avatar: React.createElement(Avatar, {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84\n          },\n          __self: this\n        }, item.User.nickname[0]),\n        content: item.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard; // import React, { useCallback, useEffect, useState } from 'react';\n// import { Avatar, Button, Card, Comment, Form, Icon, Input, List } from 'antd';\n// import Link from 'next/link';\n// import PropTypes from 'prop-types';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { ADD_COMMENT_REQUEST } from '../reducers/post';\n// const PostCard = ({ post }) => {\n//   const [commentFormOpened, setCommentFormOpened] = useState(false);\n//   const [commentText, setCommentText] = useState('');\n//   const { me } = useSelector(state => state.user);\n//   const { commentAdded, isAddingComment } = useSelector(state => state.post);\n//   const dispatch = useDispatch();\n//   const onToggleComment = useCallback(() => {\n//     setCommentFormOpened(prev => !prev);\n//   }, []);\n//   const onSubmitComment = useCallback((e) => {\n//     e.preventDefault();\n//     if (!me) {\n//       return alert('로그인이 필요합니다.');\n//     }\n//     return dispatch({\n//       type: ADD_COMMENT_REQUEST,\n//       data: {\n//         postId: post.id,\n//       },\n//     });\n//   }, [me && me.id]);\n//   useEffect(() => {\n//     setCommentText('');\n//   }, [commentAdded === true]);\n//   const onChangeCommentText = useCallback((e) => {\n//     setCommentText(e.target.value);\n//   }, []);\n//   return (\n//     <div>\n//       <Card\n//         key={+post.createdAt}\n//         cover={post.img && <img alt=\"example\" src={post.img} />}\n//         actions={[\n//           <Icon type=\"retweet\" key=\"retweet\" />,\n//           <Icon type=\"heart\" key=\"heart\" />,\n//           <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\n//           <Icon type=\"ellipsis\" key=\"ellipsis\" />,\n//         ]}\n//         extra={<Button>팔로우</Button>}\n//       >\n//         <Card.Meta\n//           avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n//           title={post.User.nickname}\n//           description={post.content}\n//         />\n//       </Card>\n//       {commentFormOpened && (\n//         <>\n//           <Form onSubmit={onSubmitComment}>\n//             <Form.Item>\n//               <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\n//             </Form.Item>\n//             <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\n//           </Form>\n//           <List\n//             header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n//             itemLayout=\"horizontal\"\n//             dataSource={post.Comments || []}\n//             renderItem={item => (\n//               <li>\n//                 <Comment\n//                   author={item.User.nickname}\n//                   avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n//                   content={item.content}\n//                 />\n//               </li>\n//             )}\n//           />\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n// PostCard.propTypes = {\n//   post: PropTypes.shape({\n//     User: PropTypes.object,\n//     content: PropTypes.string,\n//     img: PropTypes.string,\n//     createdAt: PropTypes.object,\n//   }),\n// };\n// export default PostCard;","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/components/PostCard.js"],"names":["React","useState","useCallback","useEffect","Button","Avatar","Card","Icon","Form","Input","List","Comment","PropTypes","useSelector","useDispatch","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","dispatch","commentAdded","isAddingComment","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onChangeCommentText","target","value","createdAt","img","User","nickname","content","Comments","length","item","propTypes","shape","object","string"],"mappings":"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;AAAA;AAAA;AAAA;AAAA,IAbF,CAnBJ,CADF;AAmDD,CAvFD;;AAyFA7B,QAAQ,CAACiC,SAAT,GAAqB;AACnBhC,EAAAA,IAAI,EAAEL,SAAS,CAACsC,KAAV,CAAgB;AACpBP,IAAAA,IAAI,EAAE/B,SAAS,CAACuC,MADI;AAEpBN,IAAAA,OAAO,EAAEjC,SAAS,CAACwC,MAFC;AAGpBV,IAAAA,GAAG,EAAE9B,SAAS,CAACwC,MAHK;AAIpBX,IAAAA,SAAS,EAAE7B,SAAS,CAACuC;AAJD,GAAhB;AADa,CAArB;AASA,eAAenC,QAAf,C,CAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useState, useCallback, useEffect  } from \"react\";\nimport { Button, Avatar, Card, Icon, Form, Input, List, Comment } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\n\nconst PostCard = ({ post }) => {\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  const [commentText, setCommentText] = useState(\"\");\n  const { me } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const { commentAdded, isAddingComment } = useSelector(\n    state => state.post\n  );\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev); // 댓글창이 열려있으면 닫고 닫혀있으면 열 수 있도록\n  }, []);\n\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n    if (!me) {\n      return alert(\"Please sign in to comment\");\n    }\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data:{\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n\n  useEffect(() => {\n    return () => {\n      setCommentText('')\n    };\n  }, [commentAdded === true])\n\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n\n  return (\n    <div>\n      <Card\n        key={+post.createdAt}\n        cover={post.img && <img src={post.img} />}\n        actions={[\n          <Icon type=\"retweet\" key=\"retweet\" />,\n          <Icon type=\"heart\" key=\"heart\" />,\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\n          <Icon type=\"ellipsis\" key=\"ellipsis\" />\n        ]}\n        extra={<Button>Follow</Button>}\n      >\n        <Card.Meta\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n          title={post.User.nickname}\n          description={post.content}\n        />\n      </Card>\n      {commentFormOpened && (\n        <div>\n          <Form onSubmit={onSubmitComment}>\n            <Form.Item>\n              <Input.TextArea\n                rows={4}\n                value={commentText}\n                onChange={onChangeCommentText}\n              />\n            </Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\n              Comment\n            </Button>\n          </Form>\n          <List\n            header={`${post.Comments ? post.Comments.length : 0} comments`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments || []}\n            renderItem={item => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\n\nexport default PostCard;\n\n\n// import React, { useCallback, useEffect, useState } from 'react';\n// import { Avatar, Button, Card, Comment, Form, Icon, Input, List } from 'antd';\n// import Link from 'next/link';\n// import PropTypes from 'prop-types';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { ADD_COMMENT_REQUEST } from '../reducers/post';\n\n// const PostCard = ({ post }) => {\n//   const [commentFormOpened, setCommentFormOpened] = useState(false);\n//   const [commentText, setCommentText] = useState('');\n//   const { me } = useSelector(state => state.user);\n//   const { commentAdded, isAddingComment } = useSelector(state => state.post);\n//   const dispatch = useDispatch();\n\n//   const onToggleComment = useCallback(() => {\n//     setCommentFormOpened(prev => !prev);\n//   }, []);\n\n//   const onSubmitComment = useCallback((e) => {\n//     e.preventDefault();\n//     if (!me) {\n//       return alert('로그인이 필요합니다.');\n//     }\n//     return dispatch({\n//       type: ADD_COMMENT_REQUEST,\n//       data: {\n//         postId: post.id,\n//       },\n//     });\n//   }, [me && me.id]);\n\n//   useEffect(() => {\n//     setCommentText('');\n//   }, [commentAdded === true]);\n\n//   const onChangeCommentText = useCallback((e) => {\n//     setCommentText(e.target.value);\n//   }, []);\n\n//   return (\n//     <div>\n//       <Card\n//         key={+post.createdAt}\n//         cover={post.img && <img alt=\"example\" src={post.img} />}\n//         actions={[\n//           <Icon type=\"retweet\" key=\"retweet\" />,\n//           <Icon type=\"heart\" key=\"heart\" />,\n//           <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\n//           <Icon type=\"ellipsis\" key=\"ellipsis\" />,\n//         ]}\n//         extra={<Button>팔로우</Button>}\n//       >\n//         <Card.Meta\n//           avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n//           title={post.User.nickname}\n//           description={post.content}\n//         />\n//       </Card>\n//       {commentFormOpened && (\n//         <>\n//           <Form onSubmit={onSubmitComment}>\n//             <Form.Item>\n//               <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\n//             </Form.Item>\n//             <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\n//           </Form>\n//           <List\n//             header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n//             itemLayout=\"horizontal\"\n//             dataSource={post.Comments || []}\n//             renderItem={item => (\n//               <li>\n//                 <Comment\n//                   author={item.User.nickname}\n//                   avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n//                   content={item.content}\n//                 />\n//               </li>\n//             )}\n//           />\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// PostCard.propTypes = {\n//   post: PropTypes.shape({\n//     User: PropTypes.object,\n//     content: PropTypes.string,\n//     img: PropTypes.string,\n//     createdAt: PropTypes.object,\n//   }),\n// };\n\n// export default PostCard;"]},"metadata":{},"sourceType":"module"}