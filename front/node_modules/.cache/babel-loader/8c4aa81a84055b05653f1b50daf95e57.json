{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar dummyUser = {\n  nickname: \"Asa Akira\",\n  Post: [],\n  Followings: [],\n  Followers: [],\n  signUpData: {}\n};\nexport var initState = {\n  isLoggedIn: false,\n  // 로그인 여부\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  isLoggingIn: false,\n  // 로그인 시도중\n  loginError: \"\",\n  // 로그인 에러\n  isSignedUp: false,\n  // 회원가입 성공\n  isSigningUp: false,\n  // 회원가입 시도중\n  signUpError: \"\",\n  // 회원가입 에러\n  // user: null\n  me: null,\n  followingList: [],\n  // 팔로잉 리스트\n  followerList: [],\n  // 팔로워 리스트\n  userInfo: null // 남의 정보\n\n}; // 액션 타입\n\nexport var SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\nexport var SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\nexport var SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\nexport var LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport var LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport var LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\nexport var LOAD_USER_REQUEST = \"LOAD_USER_REQUEST\";\nexport var LOAD_USER_SUCCESS = \"LOAD_USER_SUCCESS\";\nexport var LOAD_USER_FAILURE = \"LOAD_USER_FAILURE\";\nexport var LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\nexport var LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\nexport var LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\nexport var LOAD_FOLLOW_REQUEST = \"LOAD_FOLLOW_REQUEST\";\nexport var LOAD_FOLLOW_SUCCESS = \"LOAD_FOLLOW_SUCCESS\";\nexport var LOAD_FOLLOW_FAILURE = \"LOAD_FOLLOW_FAILURE\";\nexport var FOLLOW_USER_REQUEST = \"FOLLOW_USER_REQUEST\";\nexport var FOLLOW_USER_SUCCESS = \"FOLLOW_USER_SUCCESS\";\nexport var FOLLOW_USER_FAILURE = \"FOLLOW_USER_FAILURE\";\nexport var UNFOLLOW_USER_REQUEST = \"UNFOLLOW_USER_REQUEST\";\nexport var UNFOLLOW_USER_SUCCESS = \"UNFOLLOW_USER_SUCCESS\";\nexport var UNFOLLOW_USER_FAILURE = \"UNFOLLOW_USER_FAILURE\";\nexport var REMOVE_FOLLOWER_REQUEST = \"REMOVE_FOLLOWER_REQUEST\";\nexport var REMOVE_FOLLOWER_SUCCESS = \"REMOVE_FOLLOWER_SUCCESS\";\nexport var REMOVE_FOLLOWER_FAILURE = \"REMOVE_FOLLOWER_FAILURE\";\nexport var ADD_POST_TO_ME = \"ADD_POST_TO_ME\"; //  동기요청의 경우 비동기 처럼 request -> success or failure 와 같이 기다리는 것 없이 바로 실행되는 것이라서\n//  redux-saga가 필요 없다\n//  export const INCREMENT_NUMBER = 'INCREMENT_NUMBER'\n// 액션에 넣을 데이터가 동적일 경우 함수로 작성\n\nexport var signUpAction = function signUpAction(data) {\n  return {\n    type: SIGN_UP_REQUEST,\n    data: data\n  };\n};\nexport var signUpSuccess = {\n  type: SIGN_UP_SUCCESS\n};\nexport var loginRequestAction = function loginRequestAction(data) {\n  type: LOG_IN_REQUEST, data;\n};\nexport var logoutRequestAction = {\n  type: LOG_OUT_REQUEST\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      // console.log(action.data)\n      return _objectSpread({}, state, {\n        // isLoggedIn: true,\n        // user: action.data\n        // user: dummyUser\n        isLoading: true\n      });\n\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          me: dummyUser,\n          isLoading: false\n        });\n      }\n\n    case LOG_IN_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          me: null\n        });\n      }\n\n    case LOG_OUT_REQUEST:\n      return _objectSpread({}, state, {\n        isLoggedIn: false,\n        user: null\n      });\n\n    case SIGN_UP_REQUEST:\n      return _objectSpread({}, state, {\n        isSigningUp: true,\n        isSignedUp: false,\n        signUpError: \"\"\n      });\n\n    case SIGN_UP_SUCCESS:\n      return _objectSpread({}, state, {\n        isSigningUp: false,\n        isSignedUp: true\n      });\n\n    case SIGN_UP_FAILURE:\n      return _objectSpread({}, state, {\n        isSigningUp: false,\n        signUpError: action.error\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","signUpData","initState","isLoggedIn","isLoggingOut","isLoggingIn","loginError","isSignedUp","isSigningUp","signUpError","me","followingList","followerList","userInfo","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","LOAD_FOLLOW_REQUEST","LOAD_FOLLOW_SUCCESS","LOAD_FOLLOW_FAILURE","FOLLOW_USER_REQUEST","FOLLOW_USER_SUCCESS","FOLLOW_USER_FAILURE","UNFOLLOW_USER_REQUEST","UNFOLLOW_USER_SUCCESS","UNFOLLOW_USER_FAILURE","REMOVE_FOLLOWER_REQUEST","REMOVE_FOLLOWER_SUCCESS","REMOVE_FOLLOWER_FAILURE","ADD_POST_TO_ME","signUpAction","data","type","signUpSuccess","loginRequestAction","logoutRequestAction","reducer","state","action","isLoading","user","error"],"mappings":"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","sourcesContent":["const dummyUser = {\n  nickname: \"Asa Akira\",\n  Post: [],\n  Followings: [],\n  Followers: [],\n  signUpData: {}\n};\n\nexport const initState = {\n  isLoggedIn: false, // 로그인 여부\n  isLoggingOut: false, // 로그아웃 시도중\n  isLoggingIn: false, // 로그인 시도중\n  loginError: \"\", // 로그인 에러\n  isSignedUp: false, // 회원가입 성공\n  isSigningUp: false, // 회원가입 시도중\n  signUpError: \"\", // 회원가입 에러\n  // user: null\n  me: null,\n  followingList: [], // 팔로잉 리스트\n  followerList: [], // 팔로워 리스트\n  userInfo: null // 남의 정보\n};\n\n// 액션 타입\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\n\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\n\nexport const LOAD_USER_REQUEST = \"LOAD_USER_REQUEST\";\nexport const LOAD_USER_SUCCESS = \"LOAD_USER_SUCCESS\";\nexport const LOAD_USER_FAILURE = \"LOAD_USER_FAILURE\";\n\nexport const LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\nexport const LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\n\nexport const LOAD_FOLLOW_REQUEST = \"LOAD_FOLLOW_REQUEST\";\nexport const LOAD_FOLLOW_SUCCESS = \"LOAD_FOLLOW_SUCCESS\";\nexport const LOAD_FOLLOW_FAILURE = \"LOAD_FOLLOW_FAILURE\";\n\nexport const FOLLOW_USER_REQUEST = \"FOLLOW_USER_REQUEST\";\nexport const FOLLOW_USER_SUCCESS = \"FOLLOW_USER_SUCCESS\";\nexport const FOLLOW_USER_FAILURE = \"FOLLOW_USER_FAILURE\";\n\nexport const UNFOLLOW_USER_REQUEST = \"UNFOLLOW_USER_REQUEST\";\nexport const UNFOLLOW_USER_SUCCESS = \"UNFOLLOW_USER_SUCCESS\";\nexport const UNFOLLOW_USER_FAILURE = \"UNFOLLOW_USER_FAILURE\";\n\nexport const REMOVE_FOLLOWER_REQUEST = \"REMOVE_FOLLOWER_REQUEST\";\nexport const REMOVE_FOLLOWER_SUCCESS = \"REMOVE_FOLLOWER_SUCCESS\";\nexport const REMOVE_FOLLOWER_FAILURE = \"REMOVE_FOLLOWER_FAILURE\";\n\nexport const ADD_POST_TO_ME = \"ADD_POST_TO_ME\";\n\n//  동기요청의 경우 비동기 처럼 request -> success or failure 와 같이 기다리는 것 없이 바로 실행되는 것이라서\n//  redux-saga가 필요 없다\n//  export const INCREMENT_NUMBER = 'INCREMENT_NUMBER'\n\n// 액션에 넣을 데이터가 동적일 경우 함수로 작성\nexport const signUpAction = data => {\n  return {\n    type: SIGN_UP_REQUEST,\n    data: data\n  };\n};\n\nexport const signUpSuccess = {\n  type: SIGN_UP_SUCCESS\n};\n\nexport const loginRequestAction = data => {\n  type: LOG_IN_REQUEST, data;\n};\n\nexport const logoutRequestAction = {\n  type: LOG_OUT_REQUEST\n};\n\nconst reducer = (state = initState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      // console.log(action.data)\n      return {\n        ...state,\n        // isLoggedIn: true,\n        // user: action.data\n        // user: dummyUser\n        isLoading: true\n      };\n\n    case LOG_IN_SUCCESS: {\n      return {\n        ...state,\n        isLoggedIn: true,\n        me: dummyUser,\n        isLoading: false\n      };\n    }\n    case LOG_IN_FAILURE: {\n      return {\n        ...state,\n        isLoggedIn: false,\n        me: null\n      };\n    }\n    case LOG_OUT_REQUEST:\n      return {\n        ...state,\n        isLoggedIn: false,\n        user: null\n      };\n    case SIGN_UP_REQUEST:\n      return {\n        ...state,\n        isSigningUp: true,\n        isSignedUp: false,\n        signUpError: \"\"\n      };\n    case SIGN_UP_SUCCESS:\n      return {\n        ...state,\n        isSigningUp: false,\n        isSignedUp: true\n      };\n    case SIGN_UP_FAILURE:\n      return {\n        ...state,\n        isSigningUp: false,\n        signUpError: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}