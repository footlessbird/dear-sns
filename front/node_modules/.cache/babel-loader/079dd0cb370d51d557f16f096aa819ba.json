{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  margin-bottom: 20px;\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List, Popover } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport moment from 'moment';\nmoment.locale('ko');\nimport { ADD_COMMENT_REQUEST, LIKE_POST_REQUEST, LOAD_COMMENTS_REQUEST, REMOVE_POST_REQUEST, RETWEET_REQUEST, UNLIKE_POST_REQUEST } from '../reducers/post';\nimport PostImages from '../components/PostImages';\nimport PostCardContent from '../components/PostCardContent';\nimport CommentForm from './CommentForm';\nimport FollowButton from '../components/FollowButton';\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\nvar CardWrapper = styled.div(_templateObject());\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentFormOpened = _useState2[0],\n      setCommentFormOpened = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      commentText = _useState4[0],\n      setCommentText = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var liked = me && post.Likers && post.Likers.find(function (v) {\n    return v.id === me.id;\n  });\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id\n      });\n    }\n  }, []); // const onSubmitComment = useCallback((e) => {\n  //   e.preventDefault();\n  //   if (!me) {\n  //     return alert('Please login first');\n  //   }\n  //   return dispatch({\n  //     type: ADD_COMMENT_REQUEST,\n  //     data: {\n  //       postId: post.id,\n  //       content: commentText,\n  //     },\n  //   });\n  // }, [me && me.id, commentText]);\n  // useEffect(() => {\n  //   setCommentText('');\n  // }, [commentAdded === true]);\n  // const onChangeCommentText = useCallback((e) => {\n  //   setCommentText(e.target.value);\n  // }, []);\n\n  var onToggleLike = useCallback(function () {\n    if (!me) {\n      return alert('Please login first');\n    }\n\n    if (liked) {\n      // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id\n      });\n    } else {\n      // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n  var onRetweet = useCallback(function () {\n    if (!me) {\n      return alert('Please login first');\n    }\n\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id\n    });\n  }, [me && me.id, post && post.id]);\n  var onFollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: FOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onUnfollow = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: UNFOLLOW_USER_REQUEST,\n        data: userId\n      });\n    };\n  }, []);\n  var onRemovePost = useCallback(function (userId) {\n    return function () {\n      dispatch({\n        type: REMOVE_POST_REQUEST,\n        data: userId\n      });\n    };\n  });\n  return React.createElement(CardWrapper, null, React.createElement(Card, {\n    cover: post.Images && post.Images[0] && React.createElement(PostImages, {\n      images: post.Images\n    }),\n    actions: [React.createElement(Icon, {\n      type: \"retweet\",\n      key: \"retweet\",\n      onClick: onRetweet\n    }), React.createElement(Icon, {\n      type: \"heart\",\n      key: \"heart\",\n      theme: liked ? 'twoTone' : 'outlined',\n      twoToneColor: \"#eb2f96\",\n      onClick: onToggleLike\n    }), React.createElement(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), React.createElement(Popover, {\n      key: \"ellipsis\",\n      content: React.createElement(Button.Group, null, me && post.UserId === me.id ? React.createElement(React.Fragment, null, React.createElement(Button, null, \"Update\"), React.createElement(Button, {\n        type: \"danger\",\n        onClick: onRemovePost(post.id)\n      }, \"Delete\")) : React.createElement(Button, null, \"Report\"))\n    }, React.createElement(Icon, {\n      type: \"ellipsis\"\n    }))],\n    title: post.RetweetId ? \"\".concat(post.User.nickname, \" retweeted it\") : null,\n    extra: // !me || post.User.id === me.id\n    // ? null\n    // : me.Followings && me.Followings.find(v => v.id === post.User.id)\n    //   ? <Button onClick={onUnfollow(post.User.id)}>Unfollow</Button>\n    //   : <Button onClick={onFollow(post.User.id)}>Follow</Button>\n    React.createElement(FollowButton, {\n      me: me,\n      post: post\n    })\n  }, post.RetweetId && post.Retweet ? React.createElement(Card, {\n    cover: post.Retweet.Images[0] && React.createElement(PostImages, {\n      images: post.Retweet.Images\n    })\n  }, React.createElement(Card.Meta, {\n    avatar: React.createElement(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.Retweet.User.id\n        }\n      },\n      as: \"/user/\".concat(post.Retweet.User.id)\n    }, React.createElement(\"a\", null, React.createElement(Avatar, null, post.Retweet.User.nickname[0]))),\n    title: post.Retweet.User.nickname,\n    description: React.createElement(PostCardContent, {\n      postData: post.Retweet.content\n    }) // a tag x -> Link\n\n  }), moment(post.createdAt).format('YYYY.MM.DD')) : React.createElement(Card.Meta, {\n    avatar: React.createElement(Link, {\n      href: {\n        pathname: '/user',\n        query: {\n          id: post.User.id\n        }\n      },\n      as: \"/user/\".concat(post.User.id)\n    }, React.createElement(\"a\", null, React.createElement(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: React.createElement(PostCardContent, {\n      postData: post.content\n    }) // a tag x -> Link\n\n  })), commentFormOpened && React.createElement(React.Fragment, null, React.createElement(CommentForm, {\n    post: post\n  }), React.createElement(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" comment(s)\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return React.createElement(\"li\", null, React.createElement(Comment, {\n        author: item.User.nickname,\n        avatar: React.createElement(Link, {\n          href: {\n            pathname: '/user',\n            query: {\n              id: item.User.id\n            }\n          },\n          as: \"/user/\".concat(item.User.id)\n        }, React.createElement(\"a\", null, React.createElement(Avatar, null, item.User.nickname[0]))),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.string\n  }).isRequired\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/containers/PostCard.js"],"names":["React","useCallback","useEffect","useState","Avatar","Button","Card","Comment","Form","Icon","Input","List","Popover","Link","PropTypes","useDispatch","useSelector","styled","moment","locale","ADD_COMMENT_REQUEST","LIKE_POST_REQUEST","LOAD_COMMENTS_REQUEST","REMOVE_POST_REQUEST","RETWEET_REQUEST","UNLIKE_POST_REQUEST","PostImages","PostCardContent","CommentForm","FollowButton","FOLLOW_USER_REQUEST","UNFOLLOW_USER_REQUEST","CardWrapper","div","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","liked","Likers","find","v","id","onToggleComment","prev","type","data","onToggleLike","alert","onRetweet","onFollow","userId","onUnfollow","onRemovePost","Images","UserId","RetweetId","User","nickname","Retweet","pathname","query","content","createdAt","format","Comments","length","item","propTypes","shape","object","string","img","isRequired"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List, Popover } from 'antd';\nimport Link from 'next/link';\nimport PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport moment from 'moment'\nmoment. locale('ko')\n\nimport {\n  ADD_COMMENT_REQUEST,\n  LIKE_POST_REQUEST,\n  LOAD_COMMENTS_REQUEST, REMOVE_POST_REQUEST,\n  RETWEET_REQUEST,\n  UNLIKE_POST_REQUEST,\n} from '../reducers/post';\nimport PostImages from '../components/PostImages';\nimport PostCardContent from '../components/PostCardContent';\nimport CommentForm from './CommentForm'\nimport FollowButton from '../components/FollowButton'\nimport { FOLLOW_USER_REQUEST, UNFOLLOW_USER_REQUEST } from '../reducers/user';\n\nconst CardWrapper = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst PostCard = ({ post }) => {\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  const [commentText, setCommentText] = useState('');\n  const { me } = useSelector(state => state.user);\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n\n  const liked = me && post.Likers && post.Likers.find(v => v.id === me.id);\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n    if (!commentFormOpened) {\n      dispatch({\n        type: LOAD_COMMENTS_REQUEST,\n        data: post.id,\n      });\n    }\n  }, []);\n\n  // const onSubmitComment = useCallback((e) => {\n  //   e.preventDefault();\n  //   if (!me) {\n  //     return alert('Please login first');\n  //   }\n  //   return dispatch({\n  //     type: ADD_COMMENT_REQUEST,\n  //     data: {\n  //       postId: post.id,\n  //       content: commentText,\n  //     },\n  //   });\n  // }, [me && me.id, commentText]);\n\n  // useEffect(() => {\n  //   setCommentText('');\n  // }, [commentAdded === true]);\n\n  // const onChangeCommentText = useCallback((e) => {\n  //   setCommentText(e.target.value);\n  // }, []);\n\n  const onToggleLike = useCallback(() => {\n    if (!me) {\n      return alert('Please login first');\n    }\n    if (liked) { // 좋아요 누른 상태\n      dispatch({\n        type: UNLIKE_POST_REQUEST,\n        data: post.id,\n      });\n    } else { // 좋아요 안 누른 상태\n      dispatch({\n        type: LIKE_POST_REQUEST,\n        data: post.id,\n      });\n    }\n  }, [me && me.id, post && post.id, liked]);\n\n  const onRetweet = useCallback(() => {\n    if (!me) {\n      return alert('Please login first');\n    }\n    return dispatch({\n      type: RETWEET_REQUEST,\n      data: post.id,\n    });\n  }, [me && me.id, post && post.id]);\n\n  const onFollow = useCallback(userId => () => {\n    dispatch({\n      type: FOLLOW_USER_REQUEST,\n      data: userId,\n    });\n  }, []);\n\n  const onUnfollow = useCallback(userId => () => {\n    dispatch({\n      type: UNFOLLOW_USER_REQUEST,\n      data: userId,\n    });\n  }, []);\n\n  const onRemovePost = useCallback(userId => () => {\n    dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: userId,\n    });\n  });\n\n  return (\n    <CardWrapper>\n      <Card\n        cover={post.Images && post.Images[0] && <PostImages images={post.Images} />}\n        actions={[\n          <Icon type=\"retweet\" key=\"retweet\" onClick={onRetweet} />,\n          <Icon\n            type=\"heart\"\n            key=\"heart\"\n            theme={liked ? 'twoTone' : 'outlined'}\n            twoToneColor=\"#eb2f96\"\n            onClick={onToggleLike}\n          />,\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\n          <Popover\n            key=\"ellipsis\"\n            content={(\n              <Button.Group>\n                {me && post.UserId === me.id\n                  ? (\n                    <>\n                      <Button>Update</Button>\n                      <Button type=\"danger\" onClick={onRemovePost(post.id)}>Delete</Button>\n                    </>\n                  )\n                  : <Button>Report</Button>}\n              </Button.Group>\n            )}\n          >\n            <Icon type=\"ellipsis\" />\n          </Popover>,\n        ]}\n        title={post.RetweetId ? `${post.User.nickname} retweeted it` : null}\n        extra={\n          \n          // !me || post.User.id === me.id\n          // ? null\n          // : me.Followings && me.Followings.find(v => v.id === post.User.id)\n          //   ? <Button onClick={onUnfollow(post.User.id)}>Unfollow</Button>\n          //   : <Button onClick={onFollow(post.User.id)}>Follow</Button>\n          <FollowButton me={me} post={post} />    \n        }\n      >\n        {post.RetweetId && post.Retweet\n          ? (\n            <Card\n              cover={post.Retweet.Images[0] && <PostImages images={post.Retweet.Images} />}\n            >\n              <Card.Meta\n                avatar={(\n                  <Link\n                    href={{ pathname: '/user', query: { id: post.Retweet.User.id } }}\n                    as={`/user/${post.Retweet.User.id}`}\n                  >\n                    <a><Avatar>{post.Retweet.User.nickname[0]}</Avatar></a>\n                  </Link>\n                )}\n                title={post.Retweet.User.nickname}\n                description={<PostCardContent postData={post.Retweet.content} />} // a tag x -> Link\n              />\n              {moment(post.createdAt).format('YYYY.MM.DD')}\n            </Card>\n          )\n          : (\n            <Card.Meta\n              avatar={(\n                <Link href={{ pathname: '/user', query: { id: post.User.id } }} as={`/user/${post.User.id}`}>\n                  <a><Avatar>{post.User.nickname[0]}</Avatar></a>\n                </Link>\n              )}\n              title={post.User.nickname}\n              description={<PostCardContent postData={post.content} />} // a tag x -> Link\n            />\n          )}\n      </Card>\n      {commentFormOpened && (\n        <>\n          <CommentForm post={post} />\n          <List\n            header={`${post.Comments ? post.Comments.length : 0} comment(s)`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments || []}\n            renderItem={item => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={(\n                    <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\n                      <a><Avatar>{item.User.nickname[0]}</Avatar></a>\n                    </Link>\n                  )}\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </>\n      )}\n    </CardWrapper>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.string,\n  }).isRequired,\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}