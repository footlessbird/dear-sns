{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\n// call은 함수를 동기적으로 호출\n// fork는 함수를 비동기적으로 호출\n// put은 액션 dispatch\nimport { all, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST } from \"../reducers/user\";\nimport { sign } from \"crypto\"; // 서버에 요청을 보냄\n\nfunction loginAPI() {}\n\nfunction login() {\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI);\n\n        case 3:\n          _context.next = 5;\n          return put({\n            // put은 dispatch와 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 5:\n          _context.next = 12;\n          break;\n\n        case 7:\n          _context.prev = 7;\n          _context.t0 = _context[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context.t0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 7]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(watchLogin)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/sagas/user.js"],"names":["login","watchLogin","watchSignUp","userSaga","all","fork","takeLatest","call","put","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","sign","loginAPI","type","console","error","takeEvery","signUp"],"mappings":";;;;yBAUUA,K;;;yBAcAC,U;;;yBAMAC,W;;;yBAKeC,Q;;AAnCzB;AACA;AACA;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,UAApB,EAAgCC,IAAhC,EAAsCC,GAAtC,QAAiD,oBAAjD;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,cAAzC,EAAyDC,eAAzD,QAAgF,kBAAhF;AACA,SAASC,IAAT,QAAqB,QAArB,C,CAEA;;AACA,SAASC,QAAT,GAAoB,CAAE;;AAEtB,SAAUd,KAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMO,IAAI,CAACO,QAAD,CAAV;;AAFJ;AAAA;AAGI,iBAAMN,GAAG,CAAC;AAAE;AACVO,YAAAA,IAAI,EAAEL;AADE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAMgB;AACZM,UAAAA,OAAO,CAACC,KAAR;AAPJ;AAQI,iBAAMT,GAAG,CAAC;AACNO,YAAAA,IAAI,EAAEJ;AADA,WAAD,CAAT;;AARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAcA,SAAUV,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMK,UAAU,CAACG,cAAD,EAAiBT,KAAjB,CAAhB;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMgB,SAAS,CAACN,eAAD,EAAkBO,MAAlB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUhB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACJ,UAAD,CAAL,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// call은 함수를 동기적으로 호출\n// fork는 함수를 비동기적으로 호출\n// put은 액션 dispatch\nimport { all, fork, takeLatest, call, put } from \"redux-saga/effects\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST } from \"../reducers/user\";\nimport { sign } from \"crypto\";\n\n// 서버에 요청을 보냄\nfunction loginAPI() {}\n\nfunction* login() {\n  try {\n    yield call(loginAPI);\n    yield put({ // put은 dispatch와 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) { // loginAPI 실패\n    console.error(e);\n    yield put({\n        type: LOG_IN_FAILURE\n    })\n  }\n}\n\nfunction* watchLogin() {\n  //  talkeLatest는 LOG_IN 액션이 디스패치 될 때까지 기다렸다\n  //  디스패치 됬을 때 login 제너레이터 호출\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction* watchSignUp(){\n  yield takeEvery(SIGN_UP_REQUEST, signUp)\n}\n\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin)]);\n}\n"]},"metadata":{},"sourceType":"module"}