{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useCallback, useState, useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Form, Input, Button } from \"antd\";\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from \"../reducers/post\";\n\nvar PostForm = function PostForm() {\n  var dispatch = useDispatch();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      isAddingPost = _useSelector.isAddingPost,\n      postAdded = _useSelector.postAdded;\n\n  var imageInput = useRef();\n\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  console.log(imagePaths);\n  useEffect(function () {\n    setText(\"\");\n  }, [postAdded === true]);\n  var onSubmitForm = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!text || !text.trim()) {\n      return alert(\"Please write some content for your post\");\n    }\n\n    dispatch({\n      type: ADD_POST_REQUEST,\n      data: {\n        content: text.trim()\n      }\n    });\n  }, [text]);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []);\n  var onChangeImages = useCallback(function (e) {\n    console.log(e.target.files);\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append(\"image\", f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  return React.createElement(Form, {\n    style: {\n      margin: \"10px 0 20px\"\n    },\n    encType: \"multipart/form-data\",\n    onSubmit: onSubmitForm\n  }, React.createElement(Input.TextArea, {\n    maxLength: 140,\n    placeholder: \"Tell your story to share with Dear\",\n    value: text,\n    onChange: onChangeText\n  }), React.createElement(\"div\", null, React.createElement(\"input\", {\n    type: \"file\",\n    multiple: true,\n    hidden: true,\n    ref: imageInput,\n    onChange: onChangeImages\n  }), React.createElement(Button, {\n    onClick: onClickImageUpload\n  }, \"Image Upload\"), React.createElement(Button, {\n    type: \"primary\",\n    style: {\n      float: \"right\"\n    },\n    htmlType: \"submit\",\n    loading: isAddingPost\n  }, \"Post\")), React.createElement(\"div\", null, imagePaths.map(function (v, i) {\n    return React.createElement(\"div\", {\n      key: v,\n      style: {\n        display: \"inline-block\"\n      }\n    }, React.createElement(\"img\", {\n      src: \"http://localhost:3000/\".concat(v),\n      style: {\n        width: \"200px\"\n      },\n      alt: v\n    }), React.createElement(\"div\", null, React.createElement(Button, null, \"Remove\")));\n  })));\n};\n\nexport default PostForm; // import React, { useCallback, useState, useEffect, useRef } from 'react';\n// import { Form, Input, Button } from 'antd';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\n// const PostForm = () => {\n//   const dispatch = useDispatch();\n//   const [text, setText] = useState('');\n//   const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\n//   const imageInput = useRef();\n//   useEffect(() => {\n//     setText('');\n//   }, [postAdded === true]);\n//   const onSubmitForm = useCallback((e) => {\n//     e.preventDefault();\n//     if (!text || !text.trim()) {\n//       return alert('게시글을 작성하세요.');\n//     }\n//     const formData = new FormData();\n//     imagePaths.forEach((i) => {\n//       formData.append('image', i);\n//     });\n//     formData.append('content', text);\n//     dispatch({\n//       type: ADD_POST_REQUEST,\n//       data: formData,\n//     });\n//   }, [text, imagePaths]);\n//   const onChangeText = useCallback((e) => {\n//     setText(e.target.value);\n//   }, []);\n//   const onChangeImages = useCallback((e) => {\n//     console.log(e.target.files);\n//     const imageFormData = new FormData();\n//     [].forEach.call(e.target.files, (f) => {\n//       imageFormData.append('image', f);\n//     });\n//     dispatch({\n//       type: UPLOAD_IMAGES_REQUEST,\n//       data: imageFormData,\n//     });\n//   }, []);\n//   const onClickImageUpload = useCallback(() => {\n//     imageInput.current.click();\n//   }, [imageInput.current]);\n//   const onRemoveImage = useCallback(index => () => {\n//     dispatch({\n//       type: REMOVE_IMAGE,\n//       index,\n//     });\n//   }, []);\n//   return (\n//     <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onSubmit={onSubmitForm}>\n//       <Input.TextArea maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" value={text} onChange={onChangeText} />\n//       <div>\n//         <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages} />\n//         <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n//         <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\" loading={isAddingPost}>짹짹</Button>\n//       </div>\n//       <div>\n//         {imagePaths.map((v, i) => (\n//           <div key={v} style={{ display: 'inline-block' }}>\n//             <img src={`http://localhost:3000/${v}`} style={{ width: '200px' }} alt={v} />\n//             <div>\n//               <Button onClick={onRemoveImage(i)}>제거</Button>\n//             </div>\n//           </div>\n//          ))}\n//       </div>\n//     </Form>\n//   );\n// };\n// export default PostForm;","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/components/PostForm.js"],"names":["React","useCallback","useState","useEffect","useRef","useSelector","useDispatch","Form","Input","Button","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","PostForm","dispatch","state","post","imagePaths","isAddingPost","postAdded","imageInput","text","setText","console","log","onSubmitForm","e","preventDefault","trim","alert","type","data","content","onChangeText","target","value","onChangeImages","files","imageFormData","FormData","forEach","call","f","append","onClickImageUpload","current","click","margin","float","map","v","i","display","width"],"mappings":"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EAAGC,CAAH;AAAA,WACd;AAAK,MAAA,GAAG,EAAED,CAAV;AAAa,MAAA,KAAK,EAAE;AAAEE,QAAAA,OAAO,EAAE;AAAX;AAApB,OACE;AACE,MAAA,GAAG,kCAA2BF,CAA3B,CADL;AAEE,MAAA,KAAK,EAAE;AAAEG,QAAAA,KAAK,EAAE;AAAT,OAFT;AAGE,MAAA,GAAG,EAAEH;AAHP,MADF,EAME,iCACE,oBAAC,MAAD,iBADF,CANF,CADc;AAAA,GAAf,CADH,CA7BF,CADF;AA8CD,CAjGD;;AAmGA,eAAerC,QAAf,C,CAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA","sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Form, Input, Button } from \"antd\";\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from \"../reducers/post\";\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const { imagePaths, isAddingPost, postAdded } = useSelector(\n    state => state.post\n  );\n  const imageInput = useRef();\n  const [text, setText] = useState(\"\");\n\n  console.log(imagePaths);\n\n  useEffect(() => {\n    setText(\"\");\n  }, [postAdded === true]);\n\n  const onSubmitForm = useCallback(\n    e => {\n      e.preventDefault();\n      if (!text || !text.trim()) {\n        return alert(\"Please write some content for your post\");\n      }\n\n      dispatch({\n        type: ADD_POST_REQUEST,\n        data: {\n          content: text.trim()\n        }\n      });\n    },\n    [text]\n  );\n\n  const onChangeText = useCallback(e => {\n    setText(e.target.value);\n  }, []);\n\n  const onChangeImages = useCallback(e => {\n    console.log(e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append(\"image\", f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n\n  return (\n    <Form\n      style={{ margin: \"10px 0 20px\" }}\n      encType=\"multipart/form-data\"\n      onSubmit={onSubmitForm}\n    >\n      <Input.TextArea\n        maxLength={140}\n        placeholder=\"Tell your story to share with Dear\"\n        value={text}\n        onChange={onChangeText}\n      />\n      <div>\n        <input\n          type=\"file\"\n          multiple\n          hidden\n          ref={imageInput}\n          onChange={onChangeImages}\n        />\n        <Button onClick={onClickImageUpload}>Image Upload</Button>\n        <Button\n          type=\"primary\"\n          style={{ float: \"right\" }}\n          htmlType=\"submit\"\n          loading={isAddingPost}\n        >\n          Post\n        </Button>\n      </div>\n      <div>\n        {imagePaths.map((v,i) => (\n          <div key={v} style={{ display: \"inline-block\" }}>\n            <img\n              src={`http://localhost:3000/${v}`}\n              style={{ width: \"200px\" }}\n              alt={v}\n            />\n            <div>\n              <Button>Remove</Button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Form>\n  );\n};\n\nexport default PostForm;\n\n// import React, { useCallback, useState, useEffect, useRef } from 'react';\n// import { Form, Input, Button } from 'antd';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\n\n// const PostForm = () => {\n//   const dispatch = useDispatch();\n//   const [text, setText] = useState('');\n//   const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\n//   const imageInput = useRef();\n\n//   useEffect(() => {\n//     setText('');\n//   }, [postAdded === true]);\n\n//   const onSubmitForm = useCallback((e) => {\n//     e.preventDefault();\n//     if (!text || !text.trim()) {\n//       return alert('게시글을 작성하세요.');\n//     }\n//     const formData = new FormData();\n//     imagePaths.forEach((i) => {\n//       formData.append('image', i);\n//     });\n//     formData.append('content', text);\n//     dispatch({\n//       type: ADD_POST_REQUEST,\n//       data: formData,\n//     });\n//   }, [text, imagePaths]);\n\n//   const onChangeText = useCallback((e) => {\n//     setText(e.target.value);\n//   }, []);\n\n//   const onChangeImages = useCallback((e) => {\n//     console.log(e.target.files);\n//     const imageFormData = new FormData();\n//     [].forEach.call(e.target.files, (f) => {\n//       imageFormData.append('image', f);\n//     });\n//     dispatch({\n//       type: UPLOAD_IMAGES_REQUEST,\n//       data: imageFormData,\n//     });\n//   }, []);\n\n//   const onClickImageUpload = useCallback(() => {\n//     imageInput.current.click();\n//   }, [imageInput.current]);\n\n//   const onRemoveImage = useCallback(index => () => {\n//     dispatch({\n//       type: REMOVE_IMAGE,\n//       index,\n//     });\n//   }, []);\n\n//   return (\n//     <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onSubmit={onSubmitForm}>\n//       <Input.TextArea maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" value={text} onChange={onChangeText} />\n//       <div>\n//         <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages} />\n//         <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n//         <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\" loading={isAddingPost}>짹짹</Button>\n//       </div>\n//       <div>\n//         {imagePaths.map((v, i) => (\n//           <div key={v} style={{ display: 'inline-block' }}>\n//             <img src={`http://localhost:3000/${v}`} style={{ width: '200px' }} alt={v} />\n//             <div>\n//               <Button onClick={onRemoveImage(i)}>제거</Button>\n//             </div>\n//           </div>\n//          ))}\n//       </div>\n//     </Form>\n//   );\n// };\n\n// export default PostForm;\n"]},"metadata":{},"sourceType":"module"}