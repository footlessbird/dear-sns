{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(login),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLogin),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(signUp),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchSignUp),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(userSaga);\n\n// call은 함수를 동기적으로 호출\n// fork는 함수를 비동기적으로 호출\n// put은 액션 dispatch\nimport { all, fork, takeLatest, takeEvery, call, put, delay } from \"redux-saga/effects\";\nimport { LOG_IN_REQUEST, LOG_IN_SUCCESS, LOG_IN_FAILURE, SIGN_UP_REQUEST, SIGN_UP_SUCCESS, SIGN_UP_FAILURE } from \"../reducers/user\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:3306/api\"; // 서버에 요청을 보냄\n\nfunction loginAPI(loginData) {\n  return axios.post(\"/user/login\", loginData);\n}\n\nfunction login(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function login$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loginAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            // put은 dispatch와 동일\n            type: LOG_IN_SUCCESS\n          });\n\n        case 6:\n          _context.next = 13;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context.t0);\n          _context.next = 13;\n          return put({\n            type: LOG_IN_FAILURE\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchLogin() {\n  return _regeneratorRuntime.wrap(function watchLogin$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN_REQUEST, login);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction signUpAPI(signUpData) {\n  return axios.post(\"/user/\", signUpData);\n}\n\nfunction signUp(action) {\n  return _regeneratorRuntime.wrap(function signUp$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(signUpAPI, action.data);\n\n        case 3:\n          _context3.next = 5;\n          return put({\n            // put은 dispatch 동일\n            type: SIGN_UP_SUCCESS\n          });\n\n        case 5:\n          _context3.next = 12;\n          break;\n\n        case 7:\n          _context3.prev = 7;\n          _context3.t0 = _context3[\"catch\"](0);\n          // loginAPI 실패\n          console.error(_context3.t0);\n          _context3.next = 12;\n          return put({\n            type: SIGN_UP_FAILURE,\n            error: _context3.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 7]]);\n}\n\nfunction watchSignUp() {\n  return _regeneratorRuntime.wrap(function watchSignUp$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeEvery(SIGN_UP_REQUEST, signUp);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchLogin), fork(watchSignUp)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/sagas/user.js"],"names":["login","watchLogin","signUp","watchSignUp","userSaga","all","fork","takeLatest","takeEvery","call","put","delay","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","axios","defaults","baseURL","loginAPI","loginData","post","action","data","result","type","console","error","signUpAPI","signUpData"],"mappings":";;;;yBA4BUA,K;;;yBAgBAC,U;;;yBAUAC,M;;;yBAkBAC,W;;;yBAIeC,Q;;AA5EzB;AACA;AACA;AACA,SACEC,GADF,EAEEC,IAFF,EAGEC,UAHF,EAIEC,SAJF,EAKEC,IALF,EAMEC,GANF,EAOEC,KAPF,QAQO,oBARP;AASA,SACEC,cADF,EAEEC,cAFF,EAGEC,cAHF,EAIEC,eAJF,EAKEC,eALF,EAMEC,eANF,QAOO,kBAPP;AAQA,OAAOC,KAAP,MAAkB,OAAlB;AACAA,KAAK,CAACC,QAAN,CAAeC,OAAf,GAAyB,2BAAzB,C,CAEA;;AACA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B,SAAOJ,KAAK,CAACK,IAAN,CAAW,aAAX,EAA0BD,SAA1B,CAAP;AACD;;AAED,SAAUtB,KAAV,CAAgBwB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEmB,iBAAMf,IAAI,CAACY,QAAD,EAAWG,MAAM,CAACC,IAAlB,CAAV;;AAFnB;AAEUC,UAAAA,MAFV;AAAA;AAGI,iBAAMhB,GAAG,CAAC;AACR;AACAiB,YAAAA,IAAI,EAAEd;AAFE,WAAD,CAAT;;AAHJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQI;AACAe,UAAAA,OAAO,CAACC,KAAR;AATJ;AAUI,iBAAMnB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEb;AADE,WAAD,CAAT;;AAVJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUb,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAGE,iBAAMM,UAAU,CAACK,cAAD,EAAiBZ,KAAjB,CAAhB;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMA,SAAS8B,SAAT,CAAmBC,UAAnB,EAA+B;AAC7B,SAAOb,KAAK,CAACK,IAAN,CAAW,QAAX,EAAqBQ,UAArB,CAAP;AACD;;AAED,SAAU7B,MAAV,CAAiBsB,MAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEI,iBAAMf,IAAI,CAACqB,SAAD,EAAYN,MAAM,CAACC,IAAnB,CAAV;;AAFJ;AAAA;AAII,iBAAMf,GAAG,CAAC;AACR;AACAiB,YAAAA,IAAI,EAAEX;AAFE,WAAD,CAAT;;AAJJ;AAAA;AAAA;;AAAA;AAAA;AAAA;AASI;AACAY,UAAAA,OAAO,CAACC,KAAR;AAVJ;AAWI,iBAAMnB,GAAG,CAAC;AACRiB,YAAAA,IAAI,EAAEV,eADE;AAERY,YAAAA,KAAK;AAFG,WAAD,CAAT;;AAXJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAkBA,SAAU1B,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACE,iBAAMK,SAAS,CAACO,eAAD,EAAkBb,MAAlB,CAAf;;AADF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACb,iBAAMC,GAAG,CAAC,CAACC,IAAI,CAACL,UAAD,CAAL,EAAmBK,IAAI,CAACH,WAAD,CAAvB,CAAD,CAAT;;AADa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["// call은 함수를 동기적으로 호출\n// fork는 함수를 비동기적으로 호출\n// put은 액션 dispatch\nimport {\n  all,\n  fork,\n  takeLatest,\n  takeEvery,\n  call,\n  put,\n  delay\n} from \"redux-saga/effects\";\nimport {\n  LOG_IN_REQUEST,\n  LOG_IN_SUCCESS,\n  LOG_IN_FAILURE,\n  SIGN_UP_REQUEST,\n  SIGN_UP_SUCCESS,\n  SIGN_UP_FAILURE\n} from \"../reducers/user\";\nimport axios from \"axios\";\naxios.defaults.baseURL = \"http://localhost:3306/api\";\n\n// 서버에 요청을 보냄\nfunction loginAPI(loginData) {\n  return axios.post(\"/user/login\", loginData);\n}\n\nfunction* login(action) {\n  try {\n    const result = yield call(loginAPI, action.data);\n    yield put({\n      // put은 dispatch와 동일\n      type: LOG_IN_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: LOG_IN_FAILURE\n    });\n  }\n}\n\nfunction* watchLogin() {\n  //  talkeLatest는 LOG_IN 액션이 디스패치 될 때까지 기다렸다\n  //  디스패치 됬을 때 login 제너레이터 호출\n  yield takeLatest(LOG_IN_REQUEST, login);\n}\n\nfunction signUpAPI(signUpData) {\n  return axios.post(\"/user/\", signUpData);\n}\n\nfunction* signUp(action) {\n  try {\n    yield call(signUpAPI, action.data);\n    // throw new Error(\"Sign Up Error :(\");\n    yield put({\n      // put은 dispatch 동일\n      type: SIGN_UP_SUCCESS\n    });\n  } catch (e) {\n    // loginAPI 실패\n    console.error(e);\n    yield put({\n      type: SIGN_UP_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchSignUp() {\n  yield takeEvery(SIGN_UP_REQUEST, signUp);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogin), fork(watchSignUp)]);\n}\n"]},"metadata":{},"sourceType":"module"}