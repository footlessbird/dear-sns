{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nexport var initState = {\n  mainPosts: [],\n  imagePaths: [],\n  // 미리보기 이미지 경로\n  addPostError: \"\",\n  // 포스트 업로드 에러\n  isAddingPost: false,\n  // 포스트 업로드 중\n  postAdded: false,\n  // 포스팅 완료\n  isAddingComment: false,\n  addCommentError: \"\",\n  commentAdded: false\n};\nexport var LOAD_MAIN_POSTS_REQUEST = \"LOAD_MAIN_POSTS_REQUEST\";\nexport var LOAD_MAIN_POSTS_SUCCESS = \"LOAD_MAIN_POSTS_SUCCESS\";\nexport var LOAD_MAIN_POSTS_FAILURE = \"LOAD_MAIN_POSTS_FAILURE\";\nexport var LOAD_HASHTAG_POSTS_REQUEST = \"LOAD_HASHTAG_POSTS_REQUEST\";\nexport var LOAD_HASHTAG_POSTS_SUCCESS = \"LOAD_HASHTAG_POSTS_SUCCESS\";\nexport var LOAD_HASHTAG_POSTS_FAILURE = \"LOAD_HASHTAG_POSTS_FAILURE\";\nexport var LOAD_USER_POSTS_REQUEST = \"LOAD_USER_POSTS_REQUEST\";\nexport var LOAD_USER_POSTS_SUCCESS = \"LOAD_USER_POSTS_SUCCESS\";\nexport var LOAD_USER_POSTS_FAILURE = \"LOAD_USER_POSTS_FAILURE\";\nexport var UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport var UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport var UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\nexport var REMOVE_IMAGE = \"REMOVE_IMAGE\";\nexport var ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport var ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport var ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport var LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport var LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport var LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\nexport var UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport var UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport var UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\nexport var ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport var ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport var ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\nexport var LOAD_COMMENTS_REQUEST = \"LOAD_COMMENTS_REQUEST\";\nexport var LOAD_COMMENTS_SUCCESS = \"LOAD_COMMENTS_SUCCESS\";\nexport var LOAD_COMMENTS_FAILURE = \"LOAD_COMMENTS_FAILURE\";\nexport var RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport var RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport var RETWEET_FAILURE = \"RETWEET_FAILURE\";\nexport var REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport var REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport var REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case RETWEET_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case RETWEET_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          mainPosts: [action.data].concat(_toConsumableArray(state.mainPosts))\n        });\n      }\n\n    case RETWEET_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LIKE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case LIKE_POST_SUCCESS:\n      {\n        var _postIndex = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n\n        var _post = state.mainPosts[_postIndex];\n        var Likers = [{\n          id: action.data.userId\n        }].concat(_toConsumableArray(_post.Likers));\n\n        var _mainPosts = _toConsumableArray(state.mainPosts);\n\n        _mainPosts[_postIndex] = _objectSpread({}, _post, {\n          Likers: Likers\n        });\n        return _objectSpread({}, state, {\n          mainPosts: _mainPosts\n        });\n      }\n\n    case LIKE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNLIKE_POST_REQUEST:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UNLIKE_POST_SUCCESS:\n      {\n        var _postIndex2 = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n\n        var _post2 = state.mainPosts[_postIndex2];\n\n        var _Likers = _post2.Likers.filter(function (v) {\n          return v.id !== action.data.userId;\n        });\n\n        var _mainPosts2 = _toConsumableArray(state.mainPosts);\n\n        _mainPosts2[_postIndex2] = _objectSpread({}, _post2, {\n          Likers: _Likers\n        });\n        return _objectSpread({}, state, {\n          mainPosts: _mainPosts2\n        });\n      }\n\n    case UNLIKE_POST_FAILURE:\n      {\n        return _objectSpread({}, state);\n      }\n\n    case UPLOAD_IMAGES_REQUEST:\n      return _objectSpread({}, state);\n\n    case UPLOAD_IMAGES_SUCCESS:\n      return _objectSpread({}, state, {\n        imagePaths: [].concat(_toConsumableArray(state.imagePaths), [action.data])\n      });\n\n    case UPLOAD_IMAGES_FAILURE:\n      return _objectSpread({}, state);\n\n    case REMOVE_IMAGE:\n      return _objectSpread({}, state, {\n        imagePaths: state.imagePaths.filter(function (v, i) {\n          return i !== action.index;\n        })\n      });\n\n    case ADD_POST_REQUEST:\n      {\n        return _objectSpread({}, state, {\n          // 리액트는 스테이트가 변경 다시 렌더링 ...state로 새로운 객체를 (다른 참조) 만들어줘서 다시 렌더링 될 수 있게 한다\n          isAddingPost: true,\n          addPostError: \"\",\n          postAdded: false\n        });\n      }\n\n    case ADD_POST_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          mainPosts: [action.data].concat(_toConsumableArray(state.mainPosts)),\n          postAdded: true,\n          imagePaths: []\n        });\n      }\n\n    case ADD_POST_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isAddingPost: false,\n          addPostError: action.error\n        });\n      }\n\n    case ADD_COMMENT_REQUEST:\n      return _objectSpread({}, state, {\n        // 리액트는 스테이트가 변경 다시 렌더링 ...state로 새로운 객체를 (다른 참조) 만들어줘서 다시 렌더링 될 수 있게 한다\n        isAddingComment: true,\n        addCommentError: \"\",\n        commentAdded: false\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      var postIndex = state.mainPosts.findIndex(function (v) {\n        return v.id === action.data.postId;\n      });\n      var post = state.mainPosts[postIndex];\n      var Comments = [].concat(_toConsumableArray(post.Comments), [action.data.comment]);\n\n      var mainPosts = _toConsumableArray(state.mainPosts);\n\n      mainPosts[postIndex] = _objectSpread({}, post, {\n        Comments: Comments\n      });\n      return _objectSpread({}, state, {\n        isAddingComment: false,\n        mainPosts: mainPosts,\n        commentAdded: true\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return _objectSpread({}, state, {\n        isAddingComment: false,\n        addCommentError: action.error // commentAdded: false\n\n      });\n\n    case LOAD_COMMENTS_SUCCESS:\n      {\n        var _postIndex3 = state.mainPosts.findIndex(function (v) {\n          return v.id === action.data.postId;\n        });\n\n        var _post3 = state.mainPosts[_postIndex3];\n        var _Comments = action.data.comments;\n\n        var _mainPosts3 = _toConsumableArray(state.mainPosts);\n\n        _mainPosts3[_postIndex3] = _objectSpread({}, _post3, {\n          Comments: _Comments\n        });\n        return _objectSpread({}, state, {\n          mainPosts: _mainPosts3\n        });\n      }\n\n    case LOAD_MAIN_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_USER_POSTS_REQUEST:\n      return _objectSpread({}, state, {\n        // 리액트는 스테이트가 변경 다시 렌더링 ...state로 새로운 객체를 (다른 참조) 만들어줘서 다시 렌더링 될 수 있게 한다\n        mainPosts: []\n      });\n\n    case LOAD_MAIN_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_USER_POSTS_SUCCESS:\n      return _objectSpread({}, state, {\n        mainPosts: action.data\n      });\n\n    case LOAD_MAIN_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_USER_POSTS_FAILURE:\n      return _objectSpread({}, state);\n\n    case REMOVE_POST_REQUEST:\n      {\n        // break;\n        return _objectSpread({}, state);\n      }\n\n    case REMOVE_POST_SUCCESS:\n      {\n        // const index = draft.mainPosts.findIndex(v => v.id === action.data);\n        // draft.mainPosts.splice(index, 1);\n        // break;\n        return _objectSpread({}, state, {\n          mainPosts: state.mainPosts.filter(function (v) {\n            return v.id !== action.data;\n          })\n        });\n      }\n\n    case REMOVE_POST_FAILURE:\n      {\n        // break;\n        return _objectSpread({}, state);\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/reducers/post.js"],"names":["initState","mainPosts","imagePaths","addPostError","isAddingPost","postAdded","isAddingComment","addCommentError","commentAdded","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","REMOVE_IMAGE","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_REQUEST","UNLIKE_POST_SUCCESS","UNLIKE_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","RETWEET_REQUEST","RETWEET_SUCCESS","RETWEET_FAILURE","REMOVE_POST_REQUEST","REMOVE_POST_SUCCESS","REMOVE_POST_FAILURE","reducer","state","action","type","data","postIndex","findIndex","v","id","postId","post","Likers","userId","filter","i","index","error","Comments","comment","comments"],"mappings":"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","sourcesContent":["export const initState = {\n  mainPosts: [],\n  imagePaths: [], // 미리보기 이미지 경로\n  addPostError: \"\", // 포스트 업로드 에러\n  isAddingPost: false, // 포스트 업로드 중\n  postAdded: false, // 포스팅 완료\n  isAddingComment: false,\n  addCommentError: \"\",\n  commentAdded: false\n};\n\nexport const LOAD_MAIN_POSTS_REQUEST = \"LOAD_MAIN_POSTS_REQUEST\";\nexport const LOAD_MAIN_POSTS_SUCCESS = \"LOAD_MAIN_POSTS_SUCCESS\";\nexport const LOAD_MAIN_POSTS_FAILURE = \"LOAD_MAIN_POSTS_FAILURE\";\n\nexport const LOAD_HASHTAG_POSTS_REQUEST = \"LOAD_HASHTAG_POSTS_REQUEST\";\nexport const LOAD_HASHTAG_POSTS_SUCCESS = \"LOAD_HASHTAG_POSTS_SUCCESS\";\nexport const LOAD_HASHTAG_POSTS_FAILURE = \"LOAD_HASHTAG_POSTS_FAILURE\";\n\nexport const LOAD_USER_POSTS_REQUEST = \"LOAD_USER_POSTS_REQUEST\";\nexport const LOAD_USER_POSTS_SUCCESS = \"LOAD_USER_POSTS_SUCCESS\";\nexport const LOAD_USER_POSTS_FAILURE = \"LOAD_USER_POSTS_FAILURE\";\n\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\n\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\n\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const LOAD_COMMENTS_REQUEST = \"LOAD_COMMENTS_REQUEST\";\nexport const LOAD_COMMENTS_SUCCESS = \"LOAD_COMMENTS_SUCCESS\";\nexport const LOAD_COMMENTS_FAILURE = \"LOAD_COMMENTS_FAILURE\";\n\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nconst reducer = (state = initState, action) => {\n  switch (action.type) {\n    case RETWEET_REQUEST: {\n      return {\n        ...state\n      };\n    }\n    case RETWEET_SUCCESS: {\n      return {\n        ...state,\n        mainPosts: [action.data, ...state.mainPosts]\n      };\n    }\n    case RETWEET_FAILURE: {\n      return {\n        ...state\n      };\n    }\n    case LIKE_POST_REQUEST: {\n      return {\n        ...state\n      };\n    }\n    case LIKE_POST_SUCCESS: {\n      const postIndex = state.mainPosts.findIndex(\n        v => v.id === action.data.postId\n      );\n      const post = state.mainPosts[postIndex];\n      const Likers = [{ id: action.data.userId }, ...post.Likers];\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = { ...post, Likers };\n      return {\n        ...state,\n        mainPosts\n      };\n    }\n    case LIKE_POST_FAILURE: {\n      return {\n        ...state\n      };\n    }\n    case UNLIKE_POST_REQUEST: {\n      return {\n        ...state\n      };\n    }\n    case UNLIKE_POST_SUCCESS: {\n      const postIndex = state.mainPosts.findIndex(\n        v => v.id === action.data.postId\n      );\n      const post = state.mainPosts[postIndex];\n      const Likers = post.Likers.filter(v => v.id !== action.data.userId);\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = { ...post, Likers };\n      return {\n        ...state,\n        mainPosts\n      };\n    }\n    case UNLIKE_POST_FAILURE: {\n      return {\n        ...state\n      };\n    }\n\n    case UPLOAD_IMAGES_REQUEST:\n      return {\n        ...state\n      };\n    case UPLOAD_IMAGES_SUCCESS:\n      return {\n        ...state,\n        imagePaths: [...state.imagePaths, action.data]\n      };\n    case UPLOAD_IMAGES_FAILURE:\n      return {\n        ...state\n      };\n\n    case REMOVE_IMAGE:\n      return {\n        ...state,\n        imagePaths: state.imagePaths.filter((v, i) => i !== action.index)\n      };\n    case ADD_POST_REQUEST: {\n      return {\n        ...state, // 리액트는 스테이트가 변경 다시 렌더링 ...state로 새로운 객체를 (다른 참조) 만들어줘서 다시 렌더링 될 수 있게 한다\n        isAddingPost: true,\n        addPostError: \"\",\n        postAdded: false\n      };\n    }\n    case ADD_POST_SUCCESS: {\n      return {\n        ...state,\n        isAddingPost: false,\n        mainPosts: [action.data, ...state.mainPosts],\n        postAdded: true,\n        imagePaths: []\n      };\n    }\n    case ADD_POST_FAILURE: {\n      return {\n        ...state,\n        isAddingPost: false,\n        addPostError: action.error\n      };\n    }\n    case ADD_COMMENT_REQUEST:\n      return {\n        ...state, // 리액트는 스테이트가 변경 다시 렌더링 ...state로 새로운 객체를 (다른 참조) 만들어줘서 다시 렌더링 될 수 있게 한다\n        isAddingComment: true,\n        addCommentError: \"\",\n        commentAdded: false\n      };\n    case ADD_COMMENT_SUCCESS:\n      const postIndex = state.mainPosts.findIndex(\n        v => v.id === action.data.postId\n      );\n      const post = state.mainPosts[postIndex];\n      const Comments = [...post.Comments, action.data.comment];\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = { ...post, Comments };\n      return {\n        ...state,\n        isAddingComment: false,\n        mainPosts,\n        commentAdded: true\n      };\n    case ADD_COMMENT_FAILURE:\n      return {\n        ...state,\n        isAddingComment: false,\n        addCommentError: action.error\n        // commentAdded: false\n      };\n    case LOAD_COMMENTS_SUCCESS: {\n      const postIndex = state.mainPosts.findIndex(\n        v => v.id === action.data.postId\n      );\n      const post = state.mainPosts[postIndex];\n      const Comments = action.data.comments;\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = { ...post, Comments };\n      return {\n        ...state,\n        mainPosts\n      };\n    }\n    case LOAD_MAIN_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_USER_POSTS_REQUEST:\n      return {\n        ...state, // 리액트는 스테이트가 변경 다시 렌더링 ...state로 새로운 객체를 (다른 참조) 만들어줘서 다시 렌더링 될 수 있게 한다\n        mainPosts: []\n      };\n    case LOAD_MAIN_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_USER_POSTS_SUCCESS:\n      return {\n        ...state,\n        mainPosts: action.data\n      };\n    case LOAD_MAIN_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_USER_POSTS_FAILURE:\n      return {\n        ...state\n      };\n\n    case REMOVE_POST_REQUEST: {\n      // break;\n      return {\n        ...state,\n      }\n    }\n    case REMOVE_POST_SUCCESS: {\n      // const index = draft.mainPosts.findIndex(v => v.id === action.data);\n      // draft.mainPosts.splice(index, 1);\n      // break;\n      return {\n        ...state,\n        mainPosts: state.mainPosts.filter(v => v.id !== action.data)\n      }\n\n    }\n    case REMOVE_POST_FAILURE: {\n      // break;\n      return {\n        ...state\n      }\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}