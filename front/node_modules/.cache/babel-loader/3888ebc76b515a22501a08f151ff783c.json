{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport { Button, Form, Input } from 'antd';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nvar CommentForm = function CommentForm(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentText = _useState2[0],\n      setCommentText = _useState2[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector.commentAdded,\n      isAddingComment = _useSelector.isAddingComment;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector2.me;\n\n  var dispatch = useDispatch();\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText\n      }\n    });\n  }, [me && me.id, commentText]);\n  useEffect(function () {\n    setCommentText('');\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return React.createElement(Form, {\n    onSubmit: onSubmitComment\n  }, React.createElement(Form.Item, null, React.createElement(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\"));\n};\n\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired\n};\nexport default CommentForm;","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/containers/CommentForm.js"],"names":["Button","Form","Input","React","useCallback","useEffect","useState","useSelector","useDispatch","PropTypes","ADD_COMMENT_REQUEST","CommentForm","post","commentText","setCommentText","state","commentAdded","isAddingComment","user","me","dispatch","onSubmitComment","e","preventDefault","alert","type","data","postId","id","content","onChangeCommentText","target","value","propTypes","object","isRequired"],"mappings":";AAAA,SAASA,MAAT,EAAiBC,IAAjB,EAAuBC,KAAvB,QAAoC,MAApC;AACA,OAAOC,KAAP,IAAgBC,WAAhB,EAA6BC,SAA7B,EAAwCC,QAAxC,QAAwD,OAAxD;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,mBAAT,QAAoC,kBAApC;;AAEA,IAAMC,WAAW,GAAG,SAAdA,WAAc,OAAc;AAAA,MAAXC,IAAW,QAAXA,IAAW;;AAAA,kBACMN,QAAQ,CAAC,EAAD,CADd;AAAA;AAAA,MACzBO,WADyB;AAAA,MACZC,cADY;;AAAA,qBAEUP,WAAW,CAAC,UAAAQ,KAAK;AAAA,WAAIA,KAAK,CAACH,IAAV;AAAA,GAAN,CAFrB;AAAA,MAExBI,YAFwB,gBAExBA,YAFwB;AAAA,MAEVC,eAFU,gBAEVA,eAFU;;AAAA,sBAGjBV,WAAW,CAAC,UAAAQ,KAAK;AAAA,WAAIA,KAAK,CAACG,IAAV;AAAA,GAAN,CAHM;AAAA,MAGxBC,EAHwB,iBAGxBA,EAHwB;;AAIhC,MAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AAEA,MAAMa,eAAe,GAAGjB,WAAW,CAAC,UAACkB,CAAD,EAAO;AACzCA,IAAAA,CAAC,CAACC,cAAF;;AACA,QAAI,CAACJ,EAAL,EAAS;AACP,aAAOK,KAAK,CAAC,aAAD,CAAZ;AACD;;AACD,WAAOJ,QAAQ,CAAC;AACdK,MAAAA,IAAI,EAAEf,mBADQ;AAEdgB,MAAAA,IAAI,EAAE;AACJC,QAAAA,MAAM,EAAEf,IAAI,CAACgB,EADT;AAEJC,QAAAA,OAAO,EAAEhB;AAFL;AAFQ,KAAD,CAAf;AAOD,GAZkC,EAYhC,CAACM,EAAE,IAAIA,EAAE,CAACS,EAAV,EAAcf,WAAd,CAZgC,CAAnC;AAcAR,EAAAA,SAAS,CAAC,YAAM;AACdS,IAAAA,cAAc,CAAC,EAAD,CAAd;AACD,GAFQ,EAEN,CAACE,YAAY,KAAK,IAAlB,CAFM,CAAT;AAIA,MAAMc,mBAAmB,GAAG1B,WAAW,CAAC,UAACkB,CAAD,EAAO;AAC7CR,IAAAA,cAAc,CAACQ,CAAC,CAACS,MAAF,CAASC,KAAV,CAAd;AACD,GAFsC,EAEpC,EAFoC,CAAvC;AAIA,SACE,oBAAC,IAAD;AAAM,IAAA,QAAQ,EAAEX;AAAhB,KACE,oBAAC,IAAD,CAAM,IAAN,QACE,oBAAC,KAAD,CAAO,QAAP;AAAgB,IAAA,IAAI,EAAE,CAAtB;AAAyB,IAAA,KAAK,EAAER,WAAhC;AAA6C,IAAA,QAAQ,EAAEiB;AAAvD,IADF,CADF,EAIE,oBAAC,MAAD;AAAQ,IAAA,IAAI,EAAC,SAAb;AAAuB,IAAA,QAAQ,EAAC,QAAhC;AAAyC,IAAA,OAAO,EAAEb;AAAlD,oBAJF,CADF;AAQD,CApCD;;AAsCAN,WAAW,CAACsB,SAAZ,GAAwB;AACtBrB,EAAAA,IAAI,EAAEH,SAAS,CAACyB,MAAV,CAAiBC;AADD,CAAxB;AAIA,eAAexB,WAAf","sourcesContent":["import { Button, Form, Input } from 'antd';\nimport React, { useCallback, useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { ADD_COMMENT_REQUEST } from '../reducers/post';\n\nconst CommentForm = ({ post }) => {\n  const [commentText, setCommentText] = useState('');\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\n  const { me } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  const onSubmitComment = useCallback((e) => {\n    e.preventDefault();\n    if (!me) {\n      return alert('로그인이 필요합니다.');\n    }\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id,\n        content: commentText,\n      },\n    });\n  }, [me && me.id, commentText]);\n\n  useEffect(() => {\n    setCommentText('');\n  }, [commentAdded === true]);\n\n  const onChangeCommentText = useCallback((e) => {\n    setCommentText(e.target.value);\n  }, []);\n\n  return (\n    <Form onSubmit={onSubmitComment}>\n      <Form.Item>\n        <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\n      </Form.Item>\n      <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\n    </Form>\n  );\n};\n\nCommentForm.propTypes = {\n  post: PropTypes.object.isRequired,\n};\n\nexport default CommentForm;"]},"metadata":{},"sourceType":"module"}