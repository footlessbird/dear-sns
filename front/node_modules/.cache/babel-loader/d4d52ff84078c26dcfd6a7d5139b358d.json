{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\n\nvar _marked =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addPost),\n    _marked2 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddPost),\n    _marked3 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(addComment),\n    _marked4 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchAddComment),\n    _marked5 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadComments),\n    _marked6 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadComments),\n    _marked7 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadMainPosts),\n    _marked8 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadMainPosts),\n    _marked9 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadHashtagPosts),\n    _marked10 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadHashtagPosts),\n    _marked11 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(loadUserPosts),\n    _marked12 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLoadUserPosts),\n    _marked13 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(uploadImages),\n    _marked14 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUploadImages),\n    _marked15 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(likePost),\n    _marked16 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchLikePost),\n    _marked17 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(unlikePost),\n    _marked18 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchUnlikePost),\n    _marked19 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(retweet),\n    _marked20 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(watchRetweet),\n    _marked21 =\n/*#__PURE__*/\n_regeneratorRuntime.mark(postSaga);\n\nimport { all, fork, takeLatest, put, delay, call } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE, LOAD_MAIN_POSTS_REQUEST, LOAD_MAIN_POSTS_SUCCESS, LOAD_MAIN_POSTS_FAILURE, LOAD_HASHTAG_POSTS_REQUEST, LOAD_HASHTAG_POSTS_SUCCESS, LOAD_HASHTAG_POSTS_FAILURE, LOAD_USER_POSTS_REQUEST, LOAD_USER_POSTS_SUCCESS, LOAD_USER_POSTS_FAILURE, LOAD_COMMENTS_REQUEST, LOAD_COMMENTS_SUCCESS, LOAD_COMMENTS_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, LIKE_POST_REQUEST, LIKE_POST_SUCCESS, LIKE_POST_FAILURE, UNLIKE_POST_SUCCESS, UNLIKE_POST_REQUEST, UNLIKE_POST_FAILURE, RETWEET_SUCCESS, RETWEET_FAILURE, RETWEET_REQUEST } from \"../reducers/post\";\nimport { ADD_POST_TO_ME } from '../reducers/user';\nimport axios from \"axios\";\n\nfunction addPostAPI(postData) {\n  return axios.post(\"/post\", postData, {\n    withCredentials: true\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 8;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 8:\n          _context.next = 14;\n          break;\n\n        case 10:\n          _context.prev = 10;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 14;\n          return put({\n            type: ADD_POST_FAILURE,\n            error: _context.t0\n          });\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 10]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), {\n    content: data.content\n  }, {\n    withCredentials: true\n  });\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(addCommentAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: {\n              postId: action.data.postId,\n              comment: result.data\n            }\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            error: _context3.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n} ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nfunction loadCommentsAPI(postId) {\n  return axios.get(\"/post/\".concat(postId, \"/comments\"));\n}\n\nfunction loadComments(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadComments$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.prev = 0;\n          _context5.next = 3;\n          return call(loadCommentsAPI, action.data);\n\n        case 3:\n          result = _context5.sent;\n          _context5.next = 6;\n          return put({\n            type: LOAD_COMMENTS_SUCCESS,\n            data: {\n              postId: action.data,\n              comments: result.data\n            }\n          });\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](0);\n          _context5.next = 12;\n          return put({\n            type: LOAD_COMMENTS_FAILURE,\n            error: _context5.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[0, 8]]);\n}\n\nfunction watchLoadComments() {\n  return _regeneratorRuntime.wrap(function watchLoadComments$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nfunction loadMainPostsAPI() {\n  return axios.get(\"/posts\");\n}\n\nfunction loadMainPosts() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMainPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.prev = 0;\n          _context7.next = 3;\n          return call(loadMainPostsAPI);\n\n        case 3:\n          result = _context7.sent;\n          _context7.next = 6;\n          return put({\n            type: LOAD_MAIN_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context7.next = 12;\n          break;\n\n        case 8:\n          _context7.prev = 8;\n          _context7.t0 = _context7[\"catch\"](0);\n          _context7.next = 12;\n          return put({\n            type: LOAD_MAIN_POSTS_FAILURE,\n            error: _context7.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7, null, [[0, 8]]);\n}\n\nfunction watchLoadMainPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadMainPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n\n        case 2:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, _marked8);\n} ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(\"/hashtag/\".concat(encodeURIComponent(tag)));\n}\n\nfunction loadHashtagPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadHashtagPosts$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.prev = 0;\n          _context9.next = 3;\n          return call(loadHashtagPostsAPI, action.data);\n\n        case 3:\n          result = _context9.sent;\n          _context9.next = 6;\n          return put({\n            type: LOAD_HASHTAG_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context9.next = 12;\n          break;\n\n        case 8:\n          _context9.prev = 8;\n          _context9.t0 = _context9[\"catch\"](0);\n          _context9.next = 12;\n          return put({\n            type: LOAD_HASHTAG_POSTS_FAILURE,\n            error: _context9.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, _marked9, null, [[0, 8]]);\n}\n\nfunction watchLoadHashtagPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadHashtagPosts$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, _marked10);\n} ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nfunction loadUserPostsAPI(id) {\n  return axios.get(\"/user/\".concat(id, \"/posts\"));\n}\n\nfunction loadUserPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadUserPosts$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.prev = 0;\n          _context11.next = 3;\n          return call(loadUserPostsAPI, action.data);\n\n        case 3:\n          result = _context11.sent;\n          _context11.next = 6;\n          return put({\n            type: LOAD_USER_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context11.next = 12;\n          break;\n\n        case 8:\n          _context11.prev = 8;\n          _context11.t0 = _context11[\"catch\"](0);\n          _context11.next = 12;\n          return put({\n            type: LOAD_USER_POSTS_FAILURE,\n            error: _context11.t0\n          });\n\n        case 12:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, _marked11, null, [[0, 8]]);\n}\n\nfunction watchLoadUserPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadUserPosts$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, _marked12);\n} ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n// function uploadImagesAPI(formData) {\n//   return axios.post(\"/post/images\", formData, {\n//     withCredentials: true\n//   });\n// }\n// function* uploadImages(action) {\n//   try {\n//     const result = yield call(uploadImagesAPI, action.data);\n//     yield put({\n//       type: UPLOAD_IMAGES_SUCCESS,\n//       data: result.data\n//     });\n//   } catch (e) {\n//     yield put({\n//       type: UPLOAD_IMAGES_FAILURE,\n//       error: e\n//     });\n//   }\n// }\n// function* watchUploadImages() {\n//   yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n// }\n\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(\"/post/images\", formData, {\n    withCredentials: true\n  });\n}\n\nfunction uploadImages(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function uploadImages$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.prev = 0;\n          _context13.next = 3;\n          return call(uploadImagesAPI, action.data);\n\n        case 3:\n          result = _context13.sent;\n          _context13.next = 6;\n          return put({\n            type: UPLOAD_IMAGES_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context13.next = 13;\n          break;\n\n        case 8:\n          _context13.prev = 8;\n          _context13.t0 = _context13[\"catch\"](0);\n          console.error(_context13.t0);\n          _context13.next = 13;\n          return put({\n            type: UPLOAD_IMAGES_FAILURE,\n            error: _context13.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, _marked13, null, [[0, 8]]);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, _marked14);\n} ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nfunction likePostAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/like\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction likePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function likePost$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.prev = 0;\n          _context15.next = 3;\n          return call(likePostAPI, action.data);\n\n        case 3:\n          result = _context15.sent;\n          _context15.next = 6;\n          return put({\n            type: LIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context15.next = 13;\n          break;\n\n        case 8:\n          _context15.prev = 8;\n          _context15.t0 = _context15[\"catch\"](0);\n          console.error(_context15.t0);\n          _context15.next = 13;\n          return put({\n            type: LIKE_POST_FAILURE,\n            error: _context15.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, _marked15, null, [[0, 8]]);\n}\n\nfunction watchLikePost() {\n  return _regeneratorRuntime.wrap(function watchLikePost$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return takeLatest(LIKE_POST_REQUEST, likePost);\n\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, _marked16);\n} ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(\"/post/\".concat(postId, \"/like\"), {\n    withCredentials: true\n  });\n}\n\nfunction unlikePost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function unlikePost$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.prev = 0;\n          _context17.next = 3;\n          return call(unlikePostAPI, action.data);\n\n        case 3:\n          result = _context17.sent;\n          _context17.next = 6;\n          return put({\n            type: UNLIKE_POST_SUCCESS,\n            data: {\n              postId: action.data,\n              userId: result.data.userId\n            }\n          });\n\n        case 6:\n          _context17.next = 13;\n          break;\n\n        case 8:\n          _context17.prev = 8;\n          _context17.t0 = _context17[\"catch\"](0);\n          console.error(_context17.t0);\n          _context17.next = 13;\n          return put({\n            type: UNLIKE_POST_FAILURE,\n            error: _context17.t0\n          });\n\n        case 13:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, _marked17, null, [[0, 8]]);\n}\n\nfunction watchUnlikePost() {\n  return _regeneratorRuntime.wrap(function watchUnlikePost$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.next = 2;\n          return takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n\n        case 2:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, _marked18);\n} ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nfunction retweetAPI(postId) {\n  return axios.post(\"/post/\".concat(postId, \"/retweet\"), {}, {\n    withCredentials: true\n  });\n}\n\nfunction retweet(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function retweet$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.prev = 0;\n          _context19.next = 3;\n          return call(retweetAPI, action.data);\n\n        case 3:\n          result = _context19.sent;\n          _context19.next = 6;\n          return put({\n            type: RETWEET_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context19.next = 14;\n          break;\n\n        case 8:\n          _context19.prev = 8;\n          _context19.t0 = _context19[\"catch\"](0);\n          console.error(_context19.t0);\n          _context19.next = 13;\n          return put({\n            type: RETWEET_FAILURE,\n            error: _context19.t0\n          });\n\n        case 13:\n          alert(_context19.t0.response && _context19.t0.response.data);\n\n        case 14:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, _marked19, null, [[0, 8]]);\n}\n\nfunction watchRetweet() {\n  return _regeneratorRuntime.wrap(function watchRetweet$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return takeLatest(RETWEET_REQUEST, retweet);\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, _marked20);\n} ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return all([fork(watchAddPost), fork(watchLoadMainPosts), fork(watchAddComment), fork(watchLoadComments), fork(watchLoadHashtagPosts), fork(watchLoadUserPosts), fork(watchUploadImages), fork(watchLikePost), fork(watchUnlikePost), fork(watchRetweet)]);\n\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, _marked21);\n}","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/sagas/post.js"],"names":["addPost","watchAddPost","addComment","watchAddComment","loadComments","watchLoadComments","loadMainPosts","watchLoadMainPosts","loadHashtagPosts","watchLoadHashtagPosts","loadUserPosts","watchLoadUserPosts","uploadImages","watchUploadImages","likePost","watchLikePost","unlikePost","watchUnlikePost","retweet","watchRetweet","postSaga","all","fork","takeLatest","put","delay","call","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","LOAD_MAIN_POSTS_REQUEST","LOAD_MAIN_POSTS_SUCCESS","LOAD_MAIN_POSTS_FAILURE","LOAD_HASHTAG_POSTS_REQUEST","LOAD_HASHTAG_POSTS_SUCCESS","LOAD_HASHTAG_POSTS_FAILURE","LOAD_USER_POSTS_REQUEST","LOAD_USER_POSTS_SUCCESS","LOAD_USER_POSTS_FAILURE","LOAD_COMMENTS_REQUEST","LOAD_COMMENTS_SUCCESS","LOAD_COMMENTS_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LIKE_POST_REQUEST","LIKE_POST_SUCCESS","LIKE_POST_FAILURE","UNLIKE_POST_SUCCESS","UNLIKE_POST_REQUEST","UNLIKE_POST_FAILURE","RETWEET_SUCCESS","RETWEET_FAILURE","RETWEET_REQUEST","ADD_POST_TO_ME","axios","addPostAPI","postData","post","withCredentials","action","data","result","type","id","error","addCommentAPI","postId","content","comment","console","loadCommentsAPI","get","comments","loadMainPostsAPI","loadHashtagPostsAPI","tag","encodeURIComponent","loadUserPostsAPI","uploadImagesAPI","formData","likePostAPI","userId","unlikePostAPI","delete","retweetAPI","alert","response"],"mappings":"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","sourcesContent":["import { all, fork, takeLatest, put, delay, call } from \"redux-saga/effects\";\nimport {\n  ADD_POST_REQUEST,\n  ADD_POST_SUCCESS,\n  ADD_POST_FAILURE,\n  ADD_COMMENT_REQUEST,\n  ADD_COMMENT_SUCCESS,\n  ADD_COMMENT_FAILURE,\n  LOAD_MAIN_POSTS_REQUEST,\n  LOAD_MAIN_POSTS_SUCCESS,\n  LOAD_MAIN_POSTS_FAILURE,\n  LOAD_HASHTAG_POSTS_REQUEST,\n  LOAD_HASHTAG_POSTS_SUCCESS,\n  LOAD_HASHTAG_POSTS_FAILURE,\n  LOAD_USER_POSTS_REQUEST,\n  LOAD_USER_POSTS_SUCCESS,\n  LOAD_USER_POSTS_FAILURE,\n  LOAD_COMMENTS_REQUEST,\n  LOAD_COMMENTS_SUCCESS,\n  LOAD_COMMENTS_FAILURE,\n  UPLOAD_IMAGES_REQUEST,\n  UPLOAD_IMAGES_SUCCESS,\n  UPLOAD_IMAGES_FAILURE,\n  LIKE_POST_REQUEST,\n  LIKE_POST_SUCCESS,\n  LIKE_POST_FAILURE,\n  UNLIKE_POST_SUCCESS,\n  UNLIKE_POST_REQUEST,\n  UNLIKE_POST_FAILURE,\n  RETWEET_SUCCESS,\n  RETWEET_FAILURE,\n  RETWEET_REQUEST\n} from \"../reducers/post\";\n\nimport {ADD_POST_TO_ME} from '../reducers/user'\n\nimport axios from \"axios\";\n\nfunction addPostAPI(postData) {\n  return axios.post(\"/post\", postData, {\n    withCredentials: true\n  });\n}\n\nfunction* addPost(action) {\n  try {\n    const result = yield call(addPostAPI, action.data);\n    yield put({\n      type: ADD_POST_SUCCESS,\n      data: result.data\n    });\n    yield put({\n      type: ADD_POST_TO_ME,\n      data: result.data.id\n    })\n  } catch (e) {\n    yield put({\n      type: ADD_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddPost() {\n  yield takeLatest(ADD_POST_REQUEST, addPost);\n}\n\nfunction addCommentAPI(data) {\n  return axios.post(\n    `/post/${data.postId}/comment`,\n    { content: data.content },\n    {\n      withCredentials: true\n    }\n  );\n}\n\nfunction* addComment(action) {\n  try {\n    const result = yield call(addCommentAPI, action.data);\n    yield put({\n      type: ADD_COMMENT_SUCCESS,\n      data: {\n        postId: action.data.postId,\n        comment: result.data\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: ADD_COMMENT_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchAddComment() {\n  yield takeLatest(ADD_COMMENT_REQUEST, addComment);\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nfunction loadCommentsAPI(postId) {\n  return axios.get(`/post/${postId}/comments`);\n}\n\nfunction* loadComments(action) {\n  try {\n    const result = yield call(loadCommentsAPI, action.data);\n    yield put({\n      type: LOAD_COMMENTS_SUCCESS,\n      data: {\n        postId: action.data,\n        comments: result.data\n      }\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_COMMENTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadComments() {\n  yield takeLatest(LOAD_COMMENTS_REQUEST, loadComments);\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nfunction loadMainPostsAPI() {\n  return axios.get(\"/posts\");\n}\n\nfunction* loadMainPosts() {\n  try {\n    const result = yield call(loadMainPostsAPI);\n    yield put({\n      type: LOAD_MAIN_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_MAIN_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadMainPosts() {\n  yield takeLatest(LOAD_MAIN_POSTS_REQUEST, loadMainPosts);\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nfunction loadHashtagPostsAPI(tag) {\n  return axios.get(`/hashtag/${encodeURIComponent(tag)}`);\n}\n\nfunction* loadHashtagPosts(action) {\n  try {\n    const result = yield call(loadHashtagPostsAPI, action.data);\n    yield put({\n      type: LOAD_HASHTAG_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_HASHTAG_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadHashtagPosts() {\n  yield takeLatest(LOAD_HASHTAG_POSTS_REQUEST, loadHashtagPosts);\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nfunction loadUserPostsAPI(id) {\n  return axios.get(`/user/${id}/posts`);\n}\n\nfunction* loadUserPosts(action) {\n  try {\n    const result = yield call(loadUserPostsAPI, action.data);\n    yield put({\n      type: LOAD_USER_POSTS_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    yield put({\n      type: LOAD_USER_POSTS_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLoadUserPosts() {\n  yield takeLatest(LOAD_USER_POSTS_REQUEST, loadUserPosts);\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n// function uploadImagesAPI(formData) {\n//   return axios.post(\"/post/images\", formData, {\n//     withCredentials: true\n//   });\n// }\n\n// function* uploadImages(action) {\n//   try {\n//     const result = yield call(uploadImagesAPI, action.data);\n//     yield put({\n//       type: UPLOAD_IMAGES_SUCCESS,\n//       data: result.data\n//     });\n//   } catch (e) {\n//     yield put({\n//       type: UPLOAD_IMAGES_FAILURE,\n//       error: e\n//     });\n//   }\n// }\n\n// function* watchUploadImages() {\n//   yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n// }\n\nfunction uploadImagesAPI(formData) {\n  return axios.post(\"/post/images\", formData, {\n    withCredentials: true\n  });\n}\n\nfunction* uploadImages(action) {\n  try {\n    const result = yield call(uploadImagesAPI, action.data);\n    yield put({\n      type: UPLOAD_IMAGES_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UPLOAD_IMAGES_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUploadImages() {\n  yield takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nfunction likePostAPI(postId) {\n  return axios.post(\n    `/post/${postId}/like`,\n    {},\n    {\n      withCredentials: true\n    }\n  );\n}\n\nfunction* likePost(action) {\n  try {\n    const result = yield call(likePostAPI, action.data);\n    yield put({\n      type: LIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: LIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchLikePost() {\n  yield takeLatest(LIKE_POST_REQUEST, likePost);\n}\n\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nfunction unlikePostAPI(postId) {\n  return axios.delete(`/post/${postId}/like`, {\n    withCredentials: true\n  });\n}\n\nfunction* unlikePost(action) {\n  try {\n    const result = yield call(unlikePostAPI, action.data);\n    yield put({\n      type: UNLIKE_POST_SUCCESS,\n      data: {\n        postId: action.data,\n        userId: result.data.userId\n      }\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: UNLIKE_POST_FAILURE,\n      error: e\n    });\n  }\n}\n\nfunction* watchUnlikePost() {\n  yield takeLatest(UNLIKE_POST_REQUEST, unlikePost);\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\nfunction retweetAPI(postId) {\n  return axios.post(\n    `/post/${postId}/retweet`,\n    {},\n    {\n      withCredentials: true\n    }\n  );\n}\n\nfunction* retweet(action) {\n  try {\n    const result = yield call(retweetAPI, action.data);\n    yield put({\n      type: RETWEET_SUCCESS,\n      data: result.data\n    });\n  } catch (e) {\n    console.error(e);\n    yield put({\n      type: RETWEET_FAILURE,\n      error: e\n    });\n    alert(e.response && e.response.data);\n  }\n}\n\nfunction* watchRetweet() {\n  yield takeLatest(RETWEET_REQUEST, retweet);\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport default function* postSaga() {\n  yield all([\n    fork(watchAddPost),\n    fork(watchLoadMainPosts),\n    fork(watchAddComment),\n    fork(watchLoadComments),\n    fork(watchLoadHashtagPosts),\n    fork(watchLoadUserPosts),\n    fork(watchUploadImages),\n    fork(watchLikePost),\n    fork(watchUnlikePost),\n    fork(watchRetweet)\n  ]);\n}\n"]},"metadata":{},"sourceType":"module"}