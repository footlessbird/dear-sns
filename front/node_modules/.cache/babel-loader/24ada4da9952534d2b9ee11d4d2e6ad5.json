{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nvar dummyUser = {\n  nickname: \"Asa Akira\",\n  Post: [],\n  Followings: [],\n  Followers: [],\n  signUpData: {}\n};\nexport var initState = {\n  isLoggedIn: false,\n  // 로그인 여부\n  isLoggingOut: false,\n  // 로그아웃 시도중\n  isLoggingIn: false,\n  // 로그인 시도중\n  loginError: \"\",\n  // 로그인 에러\n  signedUp: false,\n  // 회원가입 성공\n  isSigningUp: false,\n  // 회원가입 시도중\n  signUpError: \"\",\n  // 회원가입 에러\n  // user: null\n  me: null,\n  followingList: [],\n  // 팔로잉 리스트\n  followerList: [],\n  // 팔로워 리스트\n  userInfo: null // 남의 정보\n\n}; // 액션 타입\n\nexport var SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\nexport var SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\nexport var SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\nexport var LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport var LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport var LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\nexport var LOAD_USER_REQUEST = \"LOAD_USER_REQUEST\";\nexport var LOAD_USER_SUCCESS = \"LOAD_USER_SUCCESS\";\nexport var LOAD_USER_FAILURE = \"LOAD_USER_FAILURE\";\nexport var LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\nexport var LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\nexport var LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\"; //  동기요청의 경우 비동기 처럼 request -> success or failure 와 같이 기다리는 것 없이 바로 실행되는 것이라서\n//  redux-saga가 필요 없다\n//  export const INCREMENT_NUMBER = 'INCREMENT_NUMBER'\n// 액션에 넣을 데이터가 동적일 경우 함수로 작성\n\nexport var signUpAction = function signUpAction(data) {\n  return {\n    type: SIGN_UP_REQUEST,\n    data: data\n  };\n};\nexport var loginAction = {\n  type: LOG_IN_REQUEST\n};\nexport var logoutAction = {\n  type: LOG_OUT_REQUEST\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      // console.log(action.data)\n      return _objectSpread({}, state, {\n        // isLoggedIn: true,\n        // user: action.data\n        // user: dummyUser\n        isLoading: true\n      });\n\n    case LOG_IN_SUCCESS:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: true,\n          me: dummyUser,\n          isLoading: false\n        });\n      }\n\n    case LOG_IN_FAILURE:\n      {\n        return _objectSpread({}, state, {\n          isLoggedIn: false,\n          me: null\n        });\n      }\n\n    case LOG_OUT_REQUEST:\n      return _objectSpread({}, state, {\n        isLoggedIn: false,\n        user: null\n      });\n\n    case SIGN_UP_REQUEST:\n      return _objectSpread({}, state, {\n        signUpData: action.data\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/reducers/user.js"],"names":["dummyUser","nickname","Post","Followings","Followers","signUpData","initState","isLoggedIn","isLoggingOut","isLoggingIn","loginError","signedUp","isSigningUp","signUpError","me","followingList","followerList","userInfo","SIGN_UP_REQUEST","SIGN_UP_SUCCESS","SIGN_UP_FAILURE","LOG_IN_REQUEST","LOG_IN_SUCCESS","LOG_IN_FAILURE","LOAD_USER_REQUEST","LOAD_USER_SUCCESS","LOAD_USER_FAILURE","LOG_OUT_REQUEST","LOG_OUT_SUCCESS","LOG_OUT_FAILURE","signUpAction","data","type","loginAction","logoutAction","reducer","state","action","isLoading","user"],"mappings":";AAAA,IAAMA,SAAS,GAAG;AAChBC,EAAAA,QAAQ,EAAE,WADM;AAEhBC,EAAAA,IAAI,EAAE,EAFU;AAGhBC,EAAAA,UAAU,EAAE,EAHI;AAIhBC,EAAAA,SAAS,EAAE,EAJK;AAKhBC,EAAAA,UAAU,EAAE;AALI,CAAlB;AAQA,OAAO,IAAMC,SAAS,GAAG;AACvBC,EAAAA,UAAU,EAAE,KADW;AACJ;AACnBC,EAAAA,YAAY,EAAE,KAFS;AAEF;AACrBC,EAAAA,WAAW,EAAE,KAHU;AAGH;AACpBC,EAAAA,UAAU,EAAE,EAJW;AAIP;AAChBC,EAAAA,QAAQ,EAAE,KALa;AAKN;AACjBC,EAAAA,WAAW,EAAE,KANU;AAMH;AACpBC,EAAAA,WAAW,EAAE,EAPU;AAON;AACjB;AACAC,EAAAA,EAAE,EAAE,IATmB;AAUvBC,EAAAA,aAAa,EAAE,EAVQ;AAUJ;AACnBC,EAAAA,YAAY,EAAE,EAXS;AAWL;AAClBC,EAAAA,QAAQ,EAAE,IAZa,CAYR;;AAZQ,CAAlB,C,CAeP;;AACA,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AAEP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AACP,OAAO,IAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,IAAMC,iBAAiB,GAAG,mBAA1B;AAEP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,eAAe,GAAG,iBAAxB,C,CAEP;AACA;AACA;AAEA;;AACA,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAAAC,IAAI,EAAI;AAClC,SAAO;AACLC,IAAAA,IAAI,EAAEd,eADD;AAELa,IAAAA,IAAI,EAAEA;AAFD,GAAP;AAID,CALM;AAOP,OAAO,IAAME,WAAW,GAAG;AACzBD,EAAAA,IAAI,EAAEX;AADmB,CAApB;AAIP,OAAO,IAAMa,YAAY,GAAG;AAC1BF,EAAAA,IAAI,EAAEL;AADoB,CAArB;;AAIP,IAAMQ,OAAO,GAAG,SAAVA,OAAU,GAA+B;AAAA,MAA9BC,KAA8B,uEAAtB9B,SAAsB;AAAA,MAAX+B,MAAW;;AAC7C,UAAQA,MAAM,CAACL,IAAf;AACE,SAAKX,cAAL;AACE;AACA,+BACKe,KADL;AAEE;AACA;AACA;AACAE,QAAAA,SAAS,EAAE;AALb;;AAQF,SAAKhB,cAAL;AAAqB;AACnB,iCACKc,KADL;AAEE7B,UAAAA,UAAU,EAAE,IAFd;AAGEO,UAAAA,EAAE,EAAEd,SAHN;AAIEsC,UAAAA,SAAS,EAAE;AAJb;AAMD;;AACD,SAAKf,cAAL;AAAqB;AACnB,iCACKa,KADL;AAEE7B,UAAAA,UAAU,EAAE,KAFd;AAGEO,UAAAA,EAAE,EAAE;AAHN;AAKD;;AACD,SAAKa,eAAL;AACE,+BACKS,KADL;AAEE7B,QAAAA,UAAU,EAAE,KAFd;AAGEgC,QAAAA,IAAI,EAAE;AAHR;;AAKF,SAAKrB,eAAL;AACE,+BACKkB,KADL;AAEE/B,QAAAA,UAAU,EAAEgC,MAAM,CAACN;AAFrB;;AAKF;AACE,aAAOK,KAAP;AAvCJ;AAyCD,CA1CD;;AA4CA,eAAeD,OAAf","sourcesContent":["const dummyUser = {\n  nickname: \"Asa Akira\",\n  Post: [],\n  Followings: [],\n  Followers: [],\n  signUpData: {}\n};\n\nexport const initState = {\n  isLoggedIn: false, // 로그인 여부\n  isLoggingOut: false, // 로그아웃 시도중\n  isLoggingIn: false, // 로그인 시도중\n  loginError: \"\", // 로그인 에러\n  signedUp: false, // 회원가입 성공\n  isSigningUp: false, // 회원가입 시도중\n  signUpError: \"\", // 회원가입 에러\n  // user: null\n  me: null,\n  followingList: [], // 팔로잉 리스트\n  followerList: [], // 팔로워 리스트\n  userInfo: null // 남의 정보\n};\n\n// 액션 타입\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\n\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\n\nexport const LOAD_USER_REQUEST = \"LOAD_USER_REQUEST\";\nexport const LOAD_USER_SUCCESS = \"LOAD_USER_SUCCESS\";\nexport const LOAD_USER_FAILURE = \"LOAD_USER_FAILURE\";\n\nexport const LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\nexport const LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\n\n//  동기요청의 경우 비동기 처럼 request -> success or failure 와 같이 기다리는 것 없이 바로 실행되는 것이라서\n//  redux-saga가 필요 없다\n//  export const INCREMENT_NUMBER = 'INCREMENT_NUMBER'\n\n// 액션에 넣을 데이터가 동적일 경우 함수로 작성\nexport const signUpAction = data => {\n  return {\n    type: SIGN_UP_REQUEST,\n    data: data\n  };\n};\n\nexport const loginAction = {\n  type: LOG_IN_REQUEST\n};\n\nexport const logoutAction = {\n  type: LOG_OUT_REQUEST\n};\n\nconst reducer = (state = initState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      // console.log(action.data)\n      return {\n        ...state,\n        // isLoggedIn: true,\n        // user: action.data\n        // user: dummyUser\n        isLoading: true\n      };\n\n    case LOG_IN_SUCCESS: {\n      return {\n        ...state,\n        isLoggedIn: true,\n        me: dummyUser,\n        isLoading: false\n      };\n    }\n    case LOG_IN_FAILURE: {\n      return {\n        ...state,\n        isLoggedIn: false,\n        me: null\n      };\n    }\n    case LOG_OUT_REQUEST:\n      return {\n        ...state,\n        isLoggedIn: false,\n        user: null\n      };\n    case SIGN_UP_REQUEST:\n      return {\n        ...state,\n        signUpData: action.data\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}