{"ast":null,"code":"var _jsxFileName = \"/Users/kangsung-yun/react-sns/front/pages/index.js\";\nimport React, { useEffect } from \"react\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LOG_IN, LOG_OUT, loginAction, logoutAction } from \"../reducers/user\";\n\nvar Home = function Home() {\n  var dispatch = useDispatch(); // 액션을 디스패치\n\n  /*\n  리렌더링이 자주 일어나는 것을 방지하기 위해 스테이트를 잘게 쪼갤수도 있다 (최적화)\n  const user = useSelector(state => state.user.user);\n  const isLoggedIn = useSelector(state => state.user.isLoggedIn); \n  */\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      user = _useSelector.user,\n      isLoggedIn = _useSelector.isLoggedIn; // user 스테이트를 가져옴 mapStateToProps 역할\n\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector2.mainPosts;\n\n  console.log(user);\n  useEffect(function () {\n    dispatch(loginAction);\n    dispatch(logoutAction);\n    dispatch(loginAction);\n  }, []);\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, user ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, user.nickname, \" logged in successfully\") : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, \"logged out successfully\"), isLoggedIn && React.createElement(PostForm, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }), mainPosts.map(function (c) {\n    return React.createElement(PostCard, {\n      key: c,\n      post: c,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35\n      },\n      __self: this\n    });\n  }));\n};\n\nexport default Home;","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/pages/index.js"],"names":["React","useEffect","PostForm","PostCard","useDispatch","useSelector","LOG_IN","LOG_OUT","loginAction","logoutAction","Home","dispatch","state","user","isLoggedIn","post","mainPosts","console","log","nickname","map","c"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,MAAT,EAAiBC,OAAjB,EAA0BC,WAA1B,EAAuCC,YAAvC,QAA2D,kBAA3D;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB,MAAMC,QAAQ,GAAGP,WAAW,EAA5B,CADiB,CACe;;AAEhC;;;;;;AAHiB,qBASYC,WAAW,CAAC,UAAAO,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAV;AAAA,GAAN,CATvB;AAAA,MASTA,IATS,gBASTA,IATS;AAAA,MASHC,UATG,gBASHA,UATG,EAS8C;;;AAT9C,sBAUKT,WAAW,CAAC,UAAAO,KAAK;AAAA,WAAIA,KAAK,CAACG,IAAV;AAAA,GAAN,CAVhB;AAAA,MAUTC,SAVS,iBAUTA,SAVS;;AAWjBC,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AAEAZ,EAAAA,SAAS,CAAC,YAAM;AACdU,IAAAA,QAAQ,CAACH,WAAD,CAAR;AACAG,IAAAA,QAAQ,CAACF,YAAD,CAAR;AACAE,IAAAA,QAAQ,CAACH,WAAD,CAAR;AACD,GAJQ,EAIN,EAJM,CAAT;AAMA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGK,IAAI,GACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAMA,IAAI,CAACM,QAAX,4BADG,GAGH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAJJ,EAMGL,UAAU,IAAI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANjB,EAOGE,SAAS,CAACI,GAAV,CAAc,UAAAC,CAAC,EAAI;AAClB,WAAO,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAf;AAAkB,MAAA,IAAI,EAAEA,CAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAP;AACD,GAFA,CAPH,CADF;AAaD,CAhCD;;AAkCA,eAAeX,IAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LOG_IN, LOG_OUT, loginAction, logoutAction } from \"../reducers/user\";\n\nconst Home = () => {\n  const dispatch = useDispatch(); // 액션을 디스패치\n\n  /*\n  리렌더링이 자주 일어나는 것을 방지하기 위해 스테이트를 잘게 쪼갤수도 있다 (최적화)\n  const user = useSelector(state => state.user.user);\n  const isLoggedIn = useSelector(state => state.user.isLoggedIn); \n  */\n\n  const { user, isLoggedIn } = useSelector(state => state.user); // user 스테이트를 가져옴 mapStateToProps 역할\n  const { mainPosts } = useSelector(state => state.post);\n  console.log(user);\n\n  useEffect(() => {\n    dispatch(loginAction);\n    dispatch(logoutAction);\n    dispatch(loginAction);\n  }, []);\n\n  return (\n    <div>\n      {user ? (\n        <div>{user.nickname} logged in successfully</div>\n      ) : (\n        <div>logged out successfully</div>\n      )}\n      {isLoggedIn && <PostForm />}\n      {mainPosts.map(c => {\n        return <PostCard key={c} post={c} />;\n      })}\n    </div>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}