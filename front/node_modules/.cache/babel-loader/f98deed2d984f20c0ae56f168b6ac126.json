{"ast":null,"code":"import _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List } from \"antd\";\nimport Link from \"next/link\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\n\nvar PostCard = function PostCard(_ref) {\n  var post = _ref.post;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      commentFormOpened = _useState2[0],\n      setCommentFormOpened = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      commentText = _useState4[0],\n      setCommentText = _useState4[1];\n\n  var _useSelector = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector.me;\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      commentAdded = _useSelector2.commentAdded,\n      isAddingComment = _useSelector2.isAddingComment;\n\n  var dispatch = useDispatch();\n  var onToggleComment = useCallback(function () {\n    setCommentFormOpened(function (prev) {\n      return !prev;\n    });\n  }, []);\n  var onSubmitComment = useCallback(function (e) {\n    e.preventDefault();\n\n    if (!me) {\n      return alert(\"로그인이 필요합니다.\");\n    }\n\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data: {\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n  useEffect(function () {\n    setCommentText(\"\");\n  }, [commentAdded === true]);\n  var onChangeCommentText = useCallback(function (e) {\n    setCommentText(e.target.value);\n  }, []);\n  return React.createElement(\"div\", null, React.createElement(Card, {\n    key: +post.createdAt,\n    cover: post.img && React.createElement(\"img\", {\n      alt: \"example\",\n      src: post.img\n    }),\n    actions: [React.createElement(Icon, {\n      type: \"retweet\",\n      key: \"retweet\"\n    }), React.createElement(Icon, {\n      type: \"heart\",\n      key: \"heart\"\n    }), React.createElement(Icon, {\n      type: \"message\",\n      key: \"message\",\n      onClick: onToggleComment\n    }), React.createElement(Icon, {\n      type: \"ellipsis\",\n      key: \"ellipsis\"\n    })],\n    extra: React.createElement(Button, null, \"\\uD314\\uB85C\\uC6B0\")\n  }, React.createElement(Card.Meta, {\n    avatar: React.createElement(Link, null, React.createElement(\"a\", null, React.createElement(Avatar, null, post.User.nickname[0]))),\n    title: post.User.nickname,\n    description: React.createElement(\"div\", null, post.content.split(/(#[^\\s]+)/g).map(function (v) {\n      if (v.match(/#[^\\s]+/)) {\n        return React.createElement(Link, {\n          href: \"/hashtag/\".concat(v.slice(1)),\n          key: v\n        }, React.createElement(\"a\", null, v));\n      }\n\n      return v;\n    }))\n  })), commentFormOpened && React.createElement(React.Fragment, null, React.createElement(Form, {\n    onSubmit: onSubmitComment\n  }, React.createElement(Form.Item, null, React.createElement(Input.TextArea, {\n    rows: 4,\n    value: commentText,\n    onChange: onChangeCommentText\n  })), React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    loading: isAddingComment\n  }, \"\\uC090\\uC57D\")), React.createElement(List, {\n    header: \"\".concat(post.Comments ? post.Comments.length : 0, \" \\uB313\\uAE00\"),\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments || [],\n    renderItem: function renderItem(item) {\n      return React.createElement(\"li\", null, React.createElement(Comment, {\n        author: item.User.nickname,\n        avatar: React.createElement(Avatar, null, item.User.nickname[0]),\n        content: item.content\n      }));\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["/Users/kangsung-yun/react-sns/front/components/PostCard.js"],"names":["React","useCallback","useEffect","useState","Avatar","Button","Card","Comment","Form","Icon","Input","List","Link","PropTypes","useDispatch","useSelector","ADD_COMMENT_REQUEST","PostCard","post","commentFormOpened","setCommentFormOpened","commentText","setCommentText","state","user","me","commentAdded","isAddingComment","dispatch","onToggleComment","prev","onSubmitComment","e","preventDefault","alert","type","data","postId","id","onChangeCommentText","target","value","createdAt","img","User","nickname","content","split","map","v","match","slice","Comments","length","item","propTypes","shape","object","string"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List } from \"antd\";\nimport Link from \"next/link\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\n\nconst PostCard = ({ post }) => {\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  const [commentText, setCommentText] = useState(\"\");\n  const { me } = useSelector(state => state.user);\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n\n  const onSubmitComment = useCallback(\n    e => {\n      e.preventDefault();\n      if (!me) {\n        return alert(\"로그인이 필요합니다.\");\n      }\n      return dispatch({\n        type: ADD_COMMENT_REQUEST,\n        data: {\n          postId: post.id\n        }\n      });\n    },\n    [me && me.id]\n  );\n\n  useEffect(() => {\n    setCommentText(\"\");\n  }, [commentAdded === true]);\n\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n\n  return (\n    <div>\n      <Card\n        key={+post.createdAt}\n        cover={post.img && <img alt=\"example\" src={post.img} />}\n        actions={[\n          <Icon type=\"retweet\" key=\"retweet\" />,\n          <Icon type=\"heart\" key=\"heart\" />,\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\n          <Icon type=\"ellipsis\" key=\"ellipsis\" />\n        ]}\n        extra={<Button>팔로우</Button>}\n      >\n        <Card.Meta\n          avatar={<Link><a><Avatar>{post.User.nickname[0]}</Avatar></a></Link>}\n          title={post.User.nickname}\n          description={\n            <div>\n              {post.content.split(/(#[^\\s]+)/g).map((v)=>{\n                if(v.match(/#[^\\s]+/)){\n                  return (\n                    <Link href={`/hashtag/${v.slice(1)}`} key={v}><a>{v}</a></Link>\n                  )\n                }\n                return v;\n              })}\n            </div>\n          }\n        />\n      </Card>\n      {commentFormOpened && (\n        <>\n          <Form onSubmit={onSubmitComment}>\n            <Form.Item>\n              <Input.TextArea\n                rows={4}\n                value={commentText}\n                onChange={onChangeCommentText}\n              />\n            </Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\n              삐약\n            </Button>\n          </Form>\n          <List\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments || []}\n            renderItem={item => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\n\nexport default PostCard;\n"]},"metadata":{},"sourceType":"module"}