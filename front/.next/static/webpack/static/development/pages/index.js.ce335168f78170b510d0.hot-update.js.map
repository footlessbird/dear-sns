{"version":3,"file":"static/webpack/static/development/pages/index.js.ce335168f78170b510d0.hot-update.js","sources":["webpack:///./components/PostForm.js"],"sourcesContent":["import React, { useCallback, useState, useEffect, useRef } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { Form, Input, Button } from \"antd\";\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from \"../reducers/post\";\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const { imagePaths, isAddingPost, postAdded } = useSelector(\n    state => state.post\n  );\n  const imageInput = useRef();\n  const [text, setText] = useState(\"\");\n\n  console.log(imagePaths);\n\n  useEffect(() => {\n    setText(\"\");\n  }, [postAdded === true]);\n\n  const onSubmitForm = useCallback(\n    e => {\n      e.preventDefault();\n      if (!text || !text.trim()) {\n        return alert(\"Please write some content for your post\");\n      }\n\n      dispatch({\n        type: ADD_POST_REQUEST,\n        data: {\n          content: text.trim()\n        }\n      });\n    },\n    [text]\n  );\n\n  const onChangeText = useCallback(e => {\n    setText(e.target.value);\n  }, []);\n\n  const onChangeImages = useCallback(e => {\n    console.log(e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append(\"image\", f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n\n  return (\n    <Form\n      style={{ margin: \"10px 0 20px\" }}\n      encType=\"multipart/form-data\"\n      onSubmit={onSubmitForm}\n    >\n      <Input.TextArea\n        maxLength={140}\n        placeholder=\"Tell your story to share with Dear\"\n        value={text}\n        onChange={onChangeText}\n      />\n      <div>\n        <input\n          type=\"file\"\n          multiple\n          hidden\n          ref={imageInput}\n          onChange={onChangeImages}\n        />\n        <Button onClick={onClickImageUpload}>Image Upload</Button>\n        <Button\n          type=\"primary\"\n          style={{ float: \"right\" }}\n          htmlType=\"submit\"\n          loading={isAddingPost}\n        >\n          Post\n        </Button>\n      </div>\n      <div>\n        {imagePaths.map(v => (\n          <div key={v} style={{ display: \"inline-block\" }}>\n            <img\n              src={`http://localhost:3000/${v}`}\n              style={{ width: \"200px\" }}\n              alt={v}\n            />\n            <div>\n              <Button>Remove</Button>\n            </div>\n          </div>\n        ))}\n      </div>\n    </Form>\n  );\n};\n\nexport default PostForm;\n\n// import React, { useCallback, useState, useEffect, useRef } from 'react';\n// import { Form, Input, Button } from 'antd';\n// import { useSelector, useDispatch } from 'react-redux';\n// import { ADD_POST_REQUEST, REMOVE_IMAGE, UPLOAD_IMAGES_REQUEST } from '../reducers/post';\n\n// const PostForm = () => {\n//   const dispatch = useDispatch();\n//   const [text, setText] = useState('');\n//   const { imagePaths, isAddingPost, postAdded } = useSelector(state => state.post);\n//   const imageInput = useRef();\n\n//   useEffect(() => {\n//     setText('');\n//   }, [postAdded === true]);\n\n//   const onSubmitForm = useCallback((e) => {\n//     e.preventDefault();\n//     if (!text || !text.trim()) {\n//       return alert('게시글을 작성하세요.');\n//     }\n//     const formData = new FormData();\n//     imagePaths.forEach((i) => {\n//       formData.append('image', i);\n//     });\n//     formData.append('content', text);\n//     dispatch({\n//       type: ADD_POST_REQUEST,\n//       data: formData,\n//     });\n//   }, [text, imagePaths]);\n\n//   const onChangeText = useCallback((e) => {\n//     setText(e.target.value);\n//   }, []);\n\n//   const onChangeImages = useCallback((e) => {\n//     console.log(e.target.files);\n//     const imageFormData = new FormData();\n//     [].forEach.call(e.target.files, (f) => {\n//       imageFormData.append('image', f);\n//     });\n//     dispatch({\n//       type: UPLOAD_IMAGES_REQUEST,\n//       data: imageFormData,\n//     });\n//   }, []);\n\n//   const onClickImageUpload = useCallback(() => {\n//     imageInput.current.click();\n//   }, [imageInput.current]);\n\n//   const onRemoveImage = useCallback(index => () => {\n//     dispatch({\n//       type: REMOVE_IMAGE,\n//       index,\n//     });\n//   }, []);\n\n//   return (\n//     <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onSubmit={onSubmitForm}>\n//       <Input.TextArea maxLength={140} placeholder=\"어떤 신기한 일이 있었나요?\" value={text} onChange={onChangeText} />\n//       <div>\n//         <input type=\"file\" multiple hidden ref={imageInput} onChange={onChangeImages} />\n//         <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n//         <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\" loading={isAddingPost}>짹짹</Button>\n//       </div>\n//       <div>\n//         {imagePaths.map((v, i) => (\n//           <div key={v} style={{ display: 'inline-block' }}>\n//             <img src={`http://localhost:3000/${v}`} style={{ width: '200px' }} alt={v} />\n//             <div>\n//               <Button onClick={onRemoveImage(i)}>제거</Button>\n//             </div>\n//           </div>\n//          ))}\n//       </div>\n//     </Form>\n//   );\n// };\n\n// export default PostForm;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAGA;AAAA;AAHA;AAAA;AAAA;AACA;AAIA;AACA;AANA;AAAA;AAAA;AAAA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAUA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAFA;AAeA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;A","sourceRoot":""}