{"version":3,"file":"static/webpack/static/development/pages/index.js.f65518d377a45b7156d6.hot-update.js","sources":["webpack:///./components/PostForm.js"],"sourcesContent":["// import React, { useCallback, useState, useEffect, useRef } from \"react\";\n// import { useSelector, useDispatch } from \"react-redux\";\n// import { Form, Input, Button } from \"antd\";\n// import { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST } from \"../reducers/post\";\n\n// const PostForm = () => {\n//   const dispatch = useDispatch();\n//   const { imagePaths, isAddingPost, postAdded } = useSelector(\n//     state => state.post\n//   );\n//   const imageInput = useRef();\n//   const [text, setText] = useState(\"\");\n\n//   useEffect(() => {\n//     setText(\"\");\n//   }, [postAdded === true]);\n\n//   const onSubmitForm = useCallback(\n//     e => {\n//       e.preventDefault();\n//       if (!text || !text.trim()) {\n//         return alert(\"Please write some content for your post\");\n//       }\n\n//       dispatch({\n//         type: ADD_POST_REQUEST,\n//         data: {\n//           content: text.trim()\n//         }\n//       });\n//     },\n//     [text]\n//   );\n\n//   const onChangeText = useCallback(e => {\n//     setText(e.target.value);\n//   }, []);\n\n//   const onChangeImages = useCallback(e => {\n//     console.log(e.target.files);\n//     const imageFormData = new FormData();\n//     [].forEach.call(e.target.files, f => {\n//       imageFormData.append(\"image\", f);\n//     });\n//     dispatch({\n//       type: UPLOAD_IMAGES_REQUEST,\n//       data: imageFormData\n//     });\n//   }, []);\n\n//   const onClickImageUpload = useCallback(() => {\n//     imageInput.current.click();\n//   }, [imageInput.current]);\n\n//   return (\n\n//     <Form\n//       style={{ margin: \"10px 0 20px\" }}\n//       encType=\"multipart/form-data\"\n//       onSubmit={onSubmitForm}\n//     >\n//       <Input.TextArea\n//         maxLength={140}\n//         placeholder=\"Tell your story to share with Dear\"\n//         value={text}\n//         onChange={onChangeText}\n//       />\n//       <div>\n//         <input\n//           type=\"file\"\n//           multiple\n//           hidden\n//           ref={imageInput}\n//           onChange={onChangeImages}\n//         />\n//         <Button onClick={onClickImageUpload}>Image Upload</Button>\n//         <Button\n//           type=\"primary\"\n//           style={{ float: \"right\" }}\n//           htmlType=\"submit\"\n//           loading={isAddingPost}\n//         >\n//           Post\n//         </Button>\n//       </div>\n//       <div>\n//         {imagePaths.map(v => (\n//           <div key={v} style={{ display: \"inline-block\" }}>\n//             <img\n//               src={`http://localhost:3000/${v}`}\n//               style={{ width: \"200px\" }}\n//               alt={v}\n//             />\n//             <div>\n//               <Button>Remove</Button>\n//             </div>\n//           </div>\n//         ))}\n//       </div>\n//     </Form>\n//   );\n// };\n\n// export default PostForm;\n\nimport React, { useCallback, useState, useEffect, useRef } from \"react\";\nimport { Form, Input, Button } from \"antd\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  ADD_POST_REQUEST,\n  REMOVE_IMAGE,\n  UPLOAD_IMAGES_REQUEST\n} from \"../reducers/post\";\n\nconst PostForm = () => {\n  const dispatch = useDispatch();\n  const [text, setText] = useState(\"\");\n  const { imagePaths, isAddingPost, postAdded } = useSelector(\n    state => state.post\n  );\n  const imageInput = useRef();\n\n  useEffect(() => {\n    setText(\"\");\n  }, [postAdded === true]);\n\n  const onSubmitForm = useCallback(\n    e => {\n      e.preventDefault();\n      if (!text || !text.trim()) {\n        return alert(\"게시글을 작성하세요.\");\n      }\n      const formData = new FormData();\n      imagePaths.forEach(i => {\n        formData.append(\"image\", i);\n      });\n      formData.append(\"content\", text);\n      dispatch({\n        type: ADD_POST_REQUEST,\n        data: formData\n      });\n    },\n    [text, imagePaths]\n  );\n\n  const onChangeText = useCallback(e => {\n    setText(e.target.value);\n  }, []);\n\n  const onChangeImages = useCallback(e => {\n    console.log(e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append(\"image\", f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n\n  const onRemoveImage = useCallback(\n    index => () => {\n      dispatch({\n        type: REMOVE_IMAGE,\n        index\n      });\n    },\n    []\n  );\n\n  return (\n    <Form\n      style={{ margin: \"10px 0 20px\" }}\n      encType=\"multipart/form-data\"\n      onSubmit={onSubmitForm}\n    >\n      <Input.TextArea\n        maxLength={140}\n        placeholder=\"어떤 신기한 일이 있었나요?\"\n        value={text}\n        onChange={onChangeText}\n      />\n      <div>\n        <input\n          type=\"file\"\n          multiple\n          hidden\n          ref={imageInput}\n          onChange={onChangeImages}\n        />\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\n        <Button\n          type=\"primary\"\n          style={{ float: \"right\" }}\n          htmlType=\"submit\"\n          loading={isAddingPost}\n        >\n          짹짹\n        </Button>\n      </div>\n      <div>\n        {imagePaths.map((v, i) => {\n          return (\n            <div key={v} style={{ display: \"inline-block\" }}>\n              <img\n                src={`http://localhost:3000/${v}`}\n                style={{ width: \"200px\" }}\n                alt={v}\n              />\n              <div>\n                <Button onClick={onRemoveImage(i)}>제거</Button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </Form>\n  );\n};\n\nexport default PostForm;\n"],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AACA;AADA;AAIA;AAAA;AAJA;AAAA;AAAA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAIA;AALA;AASA;AAEA;AAAA;AAAA;AACA;AACA;AAHA;AAMA;AACA;AACA;AACA;AAJA;AAQA;AACA;AACA;AACA;AACA;AALA;AAOA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAJA;AAWA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAHA;AAMA;AAAA;AAIA;AAIA;AACA;AACA;;;;A","sourceRoot":""}