{"version":3,"file":"static/webpack/static/development/pages/_app.js.42bdb4c96b3523bfb1ea.hot-update.js","sources":["webpack:///./components/LoginForm.js","webpack:///./reducers/user.js"],"sourcesContent":["import React, { useCallback } from \"react\";\nimport { Input, Button, Form } from \"antd\";\nimport Link from \"next/link\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { useInput } from \"../pages/signup\";\nimport { loginAction, LOG_IN_REQUEST } from \"../reducers/user\";\n\nconst LoginForm = () => {\n  const [id, onChangeId] = useInput();\n  const [password, onChangePassword] = useInput(\"\");\n  const { isLoggingIn } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n\n  const onSubmitForm = useCallback(\n    e => {\n      e.preventDefault();\n      // dispatch(loginAction);\n      dispatch({  // 액션함수를 따로 만들지 않을 수 있다 아래 타입이 스위치문  action.type에 걸림 동시에 사가에도 걸림\n        type: LOG_IN_REQUEST,\n        data: {\n          id,\n          password\n        }\n      });\n      console.log({\n        id,\n        password\n      });\n    },\n    [id, password]\n  );\n  return (\n    <div>\n      <Form onSubmit={onSubmitForm} style={{ padding: \"10px\" }}>\n        <div>\n          <label htmlFor=\"user-id\">ID</label>\n          <br />\n          <Input name=\"user-id\" value={id} onChange={onChangeId} required />\n        </div>\n        <div>\n          <label htmlFor=\"user-id\">Password</label>\n          <br />\n          <Input\n            name=\"user-password\"\n            type=\"password\"\n            value={password}\n            onChange={onChangePassword}\n            required\n          />\n        </div>\n        <div style={{ marginTop: \"10px\" }}>\n          <Button type=\"primary\" htmlType=\"submit\" loading={isLoggingIn}>\n            Log In\n          </Button>\n          <Link href=\"/signup\">\n            <a>\n              <Button>Sign up</Button>\n            </a>\n          </Link>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nexport default LoginForm;\n","\nconst dummyUser = {\n  nickname: \"Asa Akira\",\n  Post: [],\n  Followings: [],\n  Followers: [],\n  signUpData: {}\n};\n\nexport const initState = {\n  isLoggedIn: false, // 로그인 여부\n  isLoggingOut: false, // 로그아웃 시도중\n  isLoggingIn: false, // 로그인 시도중\n  loginError: \"\", // 로그인 에러\n  isSignedUp: false, // 회원가입 성공\n  isSigningUp: false, // 회원가입 시도중\n  signUpError: \"\", // 회원가입 에러\n  // user: null\n  me: null,\n  followingList: [], // 팔로잉 리스트\n  followerList: [], // 팔로워 리스트\n  userInfo: null // 남의 정보\n};\n\n// 액션 타입\nexport const SIGN_UP_REQUEST = \"SIGN_UP_REQUEST\";\nexport const SIGN_UP_SUCCESS = \"SIGN_UP_SUCCESS\";\nexport const SIGN_UP_FAILURE = \"SIGN_UP_FAILURE\";\n\nexport const LOG_IN_REQUEST = \"LOG_IN_REQUEST\";\nexport const LOG_IN_SUCCESS = \"LOG_IN_SUCCESS\";\nexport const LOG_IN_FAILURE = \"LOG_IN_FAILURE\";\n\nexport const LOAD_USER_REQUEST = \"LOAD_USER_REQUEST\";\nexport const LOAD_USER_SUCCESS = \"LOAD_USER_SUCCESS\";\nexport const LOAD_USER_FAILURE = \"LOAD_USER_FAILURE\";\n\nexport const LOG_OUT_REQUEST = \"LOG_OUT_REQUEST\";\nexport const LOG_OUT_SUCCESS = \"LOG_OUT_SUCCESS\";\nexport const LOG_OUT_FAILURE = \"LOG_OUT_FAILURE\";\n\nexport const LOAD_FOLLOW_REQUEST = \"LOAD_FOLLOW_REQUEST\";\nexport const LOAD_FOLLOW_SUCCESS = \"LOAD_FOLLOW_SUCCESS\";\nexport const LOAD_FOLLOW_FAILURE = \"LOAD_FOLLOW_FAILURE\";\n\nexport const FOLLOW_USER_REQUEST = \"FOLLOW_USER_REQUEST\";\nexport const FOLLOW_USER_SUCCESS = \"FOLLOW_USER_SUCCESS\";\nexport const FOLLOW_USER_FAILURE = \"FOLLOW_USER_FAILURE\";\n\nexport const UNFOLLOW_USER_REQUEST = \"UNFOLLOW_USER_REQUEST\";\nexport const UNFOLLOW_USER_SUCCESS = \"UNFOLLOW_USER_SUCCESS\";\nexport const UNFOLLOW_USER_FAILURE = \"UNFOLLOW_USER_FAILURE\";\n\nexport const REMOVE_FOLLOWER_REQUEST = \"REMOVE_FOLLOWER_REQUEST\";\nexport const REMOVE_FOLLOWER_SUCCESS = \"REMOVE_FOLLOWER_SUCCESS\";\nexport const REMOVE_FOLLOWER_FAILURE = \"REMOVE_FOLLOWER_FAILURE\";\n\nexport const ADD_POST_TO_ME = \"ADD_POST_TO_ME\";\n\n//  동기요청의 경우 비동기 처럼 request -> success or failure 와 같이 기다리는 것 없이 바로 실행되는 것이라서\n//  redux-saga가 필요 없다\n//  export const INCREMENT_NUMBER = 'INCREMENT_NUMBER'\n\n// 액션에 넣을 데이터가 동적일 경우 함수로 작성\n\n/*\nexport const signUpRequestAction = data => {\n  return {\n    type: SIGN_UP_REQUEST,\n    data: data\n  };\n};\n\nexport const signUpSuccess = {\n  type: SIGN_UP_SUCCESS\n};\n\nexport const loginRequestAction = data => {\n  type: LOG_IN_REQUEST, data;\n};\n\nexport const logoutRequestAction = {\n  type: LOG_OUT_REQUEST\n};\n*/\n\nconst reducer = (state = initState, action) => {\n  switch (action.type) {\n    case LOG_IN_REQUEST:\n      // console.log(action.data)\n      return {\n        ...state,\n        // isLoggedIn: true,\n        // user: action.data\n        // user: dummyUser\n        isLoggingIn: true,\n        loginError: ''\n      };\n\n    case LOG_IN_SUCCESS: {\n      return {\n        ...state,\n        isLoggingIn: false,\n        isLoggedIn: true,\n        me: dummyUser,\n      };\n    }\n    case LOG_IN_FAILURE: {\n      return {\n        ...state,\n        isLoggingIn: false,\n        isLoggedIn: false,\n        loginError: action.error,\n        me: null\n      };\n    }\n    case LOG_OUT_REQUEST:\n      return {\n        ...state,\n        isLoggedIn: false,\n        user: null\n      };\n    case SIGN_UP_REQUEST:\n      return {\n        ...state,\n        isSigningUp: true,\n        isSignedUp: false,\n        signUpError: \"\"\n      };\n    case SIGN_UP_SUCCESS:\n      return {\n        ...state,\n        isSigningUp: false,\n        isSignedUp: true\n      };\n    case SIGN_UP_FAILURE:\n      return {\n        ...state,\n        isSigningUp: false,\n        signUpError: action.error\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAHA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAFA;AAFA;AAOA;AACA;AACA;AAFA;AAIA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChEA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAbA;AACA;AAeA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;AAqBA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AANA;AACA;AAQA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAEA;AACA;AAHA;AACA;AAIA;AACA;AAEA;AACA;AAHA;AACA;AAKA;AACA;AAxDA;AA0DA;AACA;AACA;;;;A","sourceRoot":""}