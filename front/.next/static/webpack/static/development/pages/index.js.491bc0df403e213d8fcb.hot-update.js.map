{"version":3,"file":"static/webpack/static/development/pages/index.js.491bc0df403e213d8fcb.hot-update.js","sources":["webpack:///./components/PostCard.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\nimport { Avatar, Button, Card, Comment, Form, Icon, Input, List } from \"antd\";\nimport Link from \"next/link\";\nimport PropTypes from \"prop-types\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\n\nconst PostCard = ({ post }) => {\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  const [commentText, setCommentText] = useState(\"\");\n  const { me } = useSelector(state => state.user);\n  const { commentAdded, isAddingComment } = useSelector(state => state.post);\n  const dispatch = useDispatch();\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n\n  const onSubmitComment = useCallback(\n    e => {\n      e.preventDefault();\n      if (!me) {\n        return alert(\"로그인이 필요합니다.\");\n      }\n      return dispatch({\n        type: ADD_COMMENT_REQUEST,\n        data: {\n          postId: post.id\n        }\n      });\n    },\n    [me && me.id]\n  );\n\n  useEffect(() => {\n    setCommentText(\"\");\n  }, [commentAdded === true]);\n\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n\n  return (\n    <div>\n      <Card\n        key={+post.createdAt}\n        cover={post.img && <img alt=\"example\" src={post.img} />}\n        actions={[\n          <Icon type=\"retweet\" key=\"retweet\" />,\n          <Icon type=\"heart\" key=\"heart\" />,\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\n          <Icon type=\"ellipsis\" key=\"ellipsis\" />\n        ]}\n        extra={<Button>팔로우</Button>}\n      >\n        <Card.Meta\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n          title={post.User.nickname}\n          description={\n            <div>\n              {post.content.split(/(#[^\\s]+)/g).map((v)=>{\n                if(v.match(/#[^\\s]+/)){\n                  return (\n                    <Link href=\"/hashtag\" key={v}><a>{v}</a></Link>\n                  )\n                }\n                return v;\n              })}\n            </div>\n          }\n        />\n      </Card>\n      {commentFormOpened && (\n        <>\n          <Form onSubmit={onSubmitComment}>\n            <Form.Item>\n              <Input.TextArea\n                rows={4}\n                value={commentText}\n                onChange={onChangeCommentText}\n              />\n            </Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\n              삐약\n            </Button>\n          </Form>\n          <List\n            header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments || []}\n            renderItem={item => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </>\n      )}\n    </div>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\n\nexport default PostCard;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAHA;AACA;AADA;AAIA;AAAA;AAJA;AAAA;AACA;AAIA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AATA;AAYA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AACA;AAZA;AAmBA;AAAA;AAGA;AACA;AACA;AAHA;AAMA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAHA;AAFA;AAJA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;;;;A","sourceRoot":""}