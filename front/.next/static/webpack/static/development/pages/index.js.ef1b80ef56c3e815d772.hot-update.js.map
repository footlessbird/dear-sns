{"version":3,"file":"static/webpack/static/development/pages/index.js.ef1b80ef56c3e815d772.hot-update.js","sources":["webpack:///./components/PostCard.js"],"sourcesContent":["import React, { useState, useCallback, useEffect  } from \"react\";\nimport { Button, Avatar, Card, Icon, Form, Input, List, Comment } from \"antd\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { ADD_COMMENT_REQUEST } from \"../reducers/post\";\n\nconst PostCard = ({ post }) => {\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\n  const [commentText, setCommentText] = useState(\"\");\n  const { me } = useSelector(state => state.user);\n  const dispatch = useDispatch();\n  const { commentAdded, isAddingComment } = useSelector(\n    state => state.post\n  );\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev); // 댓글창이 열려있으면 닫고 닫혀있으면 열 수 있도록\n  }, []);\n\n  const onSubmitComment = useCallback(e => {\n    e.preventDefault();\n    if (!me) {\n      return alert(\"Please sign in to comment\");\n    }\n    return dispatch({\n      type: ADD_COMMENT_REQUEST,\n      data:{\n        postId: post.id\n      }\n    });\n  }, [me && me.id]);\n\n  useEffect(() => {\n    return () => {\n      setCommentText('')\n    };\n  }, [commentAdded === true])\n\n  const onChangeCommentText = useCallback(e => {\n    setCommentText(e.target.value);\n  }, []);\n\n  return (\n    <div>\n      <Card\n        key={+post.createdAt}\n        cover={post.img && <img src={post.img} />}\n        actions={[\n          <Icon type=\"retweet\" key=\"retweet\" />,\n          <Icon type=\"heart\" key=\"heart\" />,\n          <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\n          <Icon type=\"ellipsis\" key=\"ellipsis\" />\n        ]}\n        extra={<Button>Follow</Button>}\n      >\n        <Card.Meta\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n          title={post.User.nickname}\n          description={post.content}\n        />\n      </Card>\n      {commentFormOpened && (\n        <div>\n          <Form onSubmit={onSubmitComment}>\n            <Form.Item>\n              <Input.TextArea\n                rows={4}\n                value={commentText}\n                onChange={onChangeCommentText}\n              />\n            </Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>\n              Comment\n            </Button>\n          </Form>\n          <List\n            header={`${post.Comments ? post.Comments.length : 0} comments`}\n            itemLayout=\"horizontal\"\n            dataSource={post.Comments || []}\n            renderItem={item => (\n              <li>\n                <Comment\n                  author={item.User.nickname}\n                  avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n                  content={item.content}\n                />\n              </li>\n            )}\n          />\n        </div>\n      )}\n    </div>\n  );\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    User: PropTypes.object,\n    content: PropTypes.string,\n    img: PropTypes.string,\n    createdAt: PropTypes.object\n  })\n};\n\nexport default PostCard;\n\n\n// import React, { useCallback, useEffect, useState } from 'react';\n// import { Avatar, Button, Card, Comment, Form, Icon, Input, List } from 'antd';\n// import Link from 'next/link';\n// import PropTypes from 'prop-types';\n// import { useDispatch, useSelector } from 'react-redux';\n// import { ADD_COMMENT_REQUEST } from '../reducers/post';\n\n// const PostCard = ({ post }) => {\n//   const [commentFormOpened, setCommentFormOpened] = useState(false);\n//   const [commentText, setCommentText] = useState('');\n//   const { me } = useSelector(state => state.user);\n//   const { commentAdded, isAddingComment } = useSelector(state => state.post);\n//   const dispatch = useDispatch();\n\n//   const onToggleComment = useCallback(() => {\n//     setCommentFormOpened(prev => !prev);\n//   }, []);\n\n//   const onSubmitComment = useCallback((e) => {\n//     e.preventDefault();\n//     if (!me) {\n//       return alert('로그인이 필요합니다.');\n//     }\n//     return dispatch({\n//       type: ADD_COMMENT_REQUEST,\n//       data: {\n//         postId: post.id,\n//       },\n//     });\n//   }, [me && me.id]);\n\n//   useEffect(() => {\n//     setCommentText('');\n//   }, [commentAdded === true]);\n\n//   const onChangeCommentText = useCallback((e) => {\n//     setCommentText(e.target.value);\n//   }, []);\n\n//   return (\n//     <div>\n//       <Card\n//         key={+post.createdAt}\n//         cover={post.img && <img alt=\"example\" src={post.img} />}\n//         actions={[\n//           <Icon type=\"retweet\" key=\"retweet\" />,\n//           <Icon type=\"heart\" key=\"heart\" />,\n//           <Icon type=\"message\" key=\"message\" onClick={onToggleComment} />,\n//           <Icon type=\"ellipsis\" key=\"ellipsis\" />,\n//         ]}\n//         extra={<Button>팔로우</Button>}\n//       >\n//         <Card.Meta\n//           avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\n//           title={post.User.nickname}\n//           description={post.content}\n//         />\n//       </Card>\n//       {commentFormOpened && (\n//         <>\n//           <Form onSubmit={onSubmitComment}>\n//             <Form.Item>\n//               <Input.TextArea rows={4} value={commentText} onChange={onChangeCommentText} />\n//             </Form.Item>\n//             <Button type=\"primary\" htmlType=\"submit\" loading={isAddingComment}>삐약</Button>\n//           </Form>\n//           <List\n//             header={`${post.Comments ? post.Comments.length : 0} 댓글`}\n//             itemLayout=\"horizontal\"\n//             dataSource={post.Comments || []}\n//             renderItem={item => (\n//               <li>\n//                 <Comment\n//                   author={item.User.nickname}\n//                   avatar={<Avatar>{item.User.nickname[0]}</Avatar>}\n//                   content={item.content}\n//                 />\n//               </li>\n//             )}\n//           />\n//         </>\n//       )}\n//     </div>\n//   );\n// };\n\n// PostCard.propTypes = {\n//   post: PropTypes.shape({\n//     User: PropTypes.object,\n//     content: PropTypes.string,\n//     img: PropTypes.string,\n//     createdAt: PropTypes.object,\n//   }),\n// };\n\n// export default PostCard;"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAGA;AAAA;AAHA;AACA;AAGA;AACA;AALA;AAMA;AAAA;AANA;AAAA;AACA;AAQA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AADA;AAFA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAFA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAkBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AASA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;A","sourceRoot":""}