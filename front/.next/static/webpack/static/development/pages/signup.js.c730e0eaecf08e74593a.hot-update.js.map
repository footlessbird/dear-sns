{"version":3,"file":"static/webpack/static/development/pages/signup.js.c730e0eaecf08e74593a.hot-update.js","sources":["webpack:///./pages/signup.js"],"sourcesContent":["import React, { useState, useCallback } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\n/*\n    함수 컴포넌트는 state가 바뀌면 signup.js 컴포넌트가 통째로 재실행 됨\n    따라서 함수 역시 새로 생성됨\n    그 함수를 전달받은 자식 컴포넌트들은 렌더링을 다시함 e.g <Form onSubmit={onSubmit}>\n    자바스크립트는 함수도 객체기때문에 객체는 새로생성되면 이전객체와는 다른 객체가 됨\n    그러면 의도치 않는 리렌더링이 발생됨\n    그러므로 props로 넘겨주는 함수는 useCallback 필수 (자식컴포넌트에 전달하는 함수)\n*/\nimport Head from \"next/head\";\nimport { Form, Input, Checkbox, Button } from \"antd\";\n\nimport Layout from \"../components/Layout\";\nimport { signUpAction, SIGN_UP_REQUEST } from \"../reducers/user\";\n\n//  custom hook\nexport const useInput = (initValue = null) => {\n  const [value, setter] = useState(initValue);\n  const handler = useCallback(e => {\n    setter(e.target.value);\n  }, []);\n  return [value, handler];\n};\n\nconst Signup = () => {\n  //   const [id, setId] = useState(\"\");\n  //   const [nick, setNick] = useState(\"\");\n  //   const [password, setPassword] = useState(\"\");\n  const [passwordConfirm, setPasswordConfirm] = useState(\"\");\n  const [passwordError, setPasswordError] = useState(false);\n  const [term, setTerm] = useState(false);\n  const [termError, setTermError] = useState(false);\n\n  const [id, onChangeId] = useInput(\"\");\n  const [nick, onChangeNick] = useInput(\"\");\n  const [password, onChangePassword] = useInput(\"\");\n\n  const dispatch = useDispatch();\n  const {isSigningUp, me} = useSe\n  const onSubmit = useCallback(\n    e => {\n      e.preventDefault();\n      if (password !== passwordConfirm) {\n        return setPasswordError(true);\n      }\n      if (!term) {\n        return setTermError(true);\n      }\n      // dispatch(signUpAction({\n      //   id,\n      //   password,\n      //   nick\n      // }))\n      return dispatch({\n        type: SIGN_UP_REQUEST,\n        data: {\n          id,\n          password,\n          nick\n        }\n      });\n\n      console.log({\n        id,\n        nick,\n        password,\n        passwordConfirm,\n        term\n      });\n      // useCallback을 쓸 땐 함수 내부에서 쓰는 state를 dependency 배열에 넣어준다\n      // [password, passwordConfirm, term]\n    },\n    [password, passwordConfirm, term]\n  );\n\n  /*\n  const onChangeId = e => {\n    setId(e.target.value);\n  };\n\n  const onChangeNick = e => {\n    setNick(e.target.value);\n  };\n\n  const onChangePassword = e => {\n    setPassword(e.target.value);\n  };\n  */\n\n  const onChangePasswordConfirm = useCallback(\n    e => {\n      setPasswordError(e.target.value !== password);\n      setPasswordConfirm(e.target.value);\n    },\n    [password]\n  );\n\n  const onChangeTerm = useCallback(e => {\n    setTermError(false);\n    setTerm(e.target.checked);\n  }, []);\n\n  return (\n    <div>\n      <h1>Sign up</h1>\n      <Form onSubmit={onSubmit} style={{ padding: 10 }}>\n        <div>\n          <label htmlFor=\"user-id\">ID</label>\n          <Input\n            type=\"text\"\n            name=\"user-id\"\n            value={id}\n            required\n            onChange={onChangeId}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"user-nick\">Nick Name</label>\n          <Input\n            name=\"user-nick\"\n            value={nick}\n            required\n            onChange={onChangeNick}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"user-password\">Password</label>\n          <Input\n            name=\"user-password\"\n            type=\"password\"\n            required\n            onChange={onChangePassword}\n            value={password}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"user-password-confirm\">Password Confirm</label>\n          <Input\n            name=\"user-password-confirm\"\n            type=\"password\"\n            required\n            onChange={onChangePasswordConfirm}\n            value={passwordConfirm}\n          />\n          {passwordError && (\n            <div style={{ color: \"red\" }}>Password should match</div>\n          )}\n        </div>\n        <div>\n          <Checkbox name=\"user-term\" onChange={onChangeTerm} value={term}>\n            I agree with the term\n          </Checkbox>\n          {termError && (\n            <div style={{ color: \"red\" }}>\n              Please check the box 'I agree with the term'\n            </div>\n          )}\n        </div>\n        <div>\n          <Button type=\"primary\" htmlType=\"submit\">\n            Done\n          </Button>\n        </div>\n      </Form>\n    </div>\n  );\n};\n\nexport default Signup;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;;;;;;;;;AAQA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAYA;AAbA;AAAA;AAAA;AAeA;AAEA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AASA;AACA;AACA;AACA;AACA;AACA;AALA;AAQA;AACA;AAIA;;;;;;;;;;;;AAcA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;A","sourceRoot":""}