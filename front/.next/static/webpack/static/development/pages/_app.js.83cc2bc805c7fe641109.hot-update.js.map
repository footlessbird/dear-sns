{"version":3,"file":"static/webpack/static/development/pages/_app.js.83cc2bc805c7fe641109.hot-update.js","sources":["webpack:///./reducers/post.js"],"sourcesContent":["export const initState = {\n  mainPosts: [],\n  imagePaths: [], // 미리보기 이미지 경로\n  addPostError: \"\", // 포스트 업로드 에러\n  isAddingPost: false, // 포스트 업로드 중\n  postAdded: false, // 포스팅 완료\n  isAddingComment: false,\n  addCommentError: \"\",\n  commentAdded: false\n};\n\nexport const LOAD_MAIN_POSTS_REQUEST = \"LOAD_MAIN_POSTS_REQUEST\";\nexport const LOAD_MAIN_POSTS_SUCCESS = \"LOAD_MAIN_POSTS_SUCCESS\";\nexport const LOAD_MAIN_POSTS_FAILURE = \"LOAD_MAIN_POSTS_FAILURE\";\n\nexport const LOAD_HASHTAG_POSTS_REQUEST = \"LOAD_HASHTAG_POSTS_REQUEST\";\nexport const LOAD_HASHTAG_POSTS_SUCCESS = \"LOAD_HASHTAG_POSTS_SUCCESS\";\nexport const LOAD_HASHTAG_POSTS_FAILURE = \"LOAD_HASHTAG_POSTS_FAILURE\";\n\nexport const LOAD_USER_POSTS_REQUEST = \"LOAD_USER_POSTS_REQUEST\";\nexport const LOAD_USER_POSTS_SUCCESS = \"LOAD_USER_POSTS_SUCCESS\";\nexport const LOAD_USER_POSTS_FAILURE = \"LOAD_USER_POSTS_FAILURE\";\n\nexport const UPLOAD_IMAGES_REQUEST = \"UPLOAD_IMAGES_REQUEST\";\nexport const UPLOAD_IMAGES_SUCCESS = \"UPLOAD_IMAGES_SUCCESS\";\nexport const UPLOAD_IMAGES_FAILURE = \"UPLOAD_IMAGES_FAILURE\";\n\nexport const REMOVE_IMAGE = \"REMOVE_IMAGE\";\n\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\n\nexport const LIKE_POST_REQUEST = \"LIKE_POST_REQUEST\";\nexport const LIKE_POST_SUCCESS = \"LIKE_POST_SUCCESS\";\nexport const LIKE_POST_FAILURE = \"LIKE_POST_FAILURE\";\n\nexport const UNLIKE_POST_REQUEST = \"UNLIKE_POST_REQUEST\";\nexport const UNLIKE_POST_SUCCESS = \"UNLIKE_POST_SUCCESS\";\nexport const UNLIKE_POST_FAILURE = \"UNLIKE_POST_FAILURE\";\n\nexport const ADD_COMMENT_REQUEST = \"ADD_COMMENT_REQUEST\";\nexport const ADD_COMMENT_SUCCESS = \"ADD_COMMENT_SUCCESS\";\nexport const ADD_COMMENT_FAILURE = \"ADD_COMMENT_FAILURE\";\n\nexport const LOAD_COMMENTS_REQUEST = \"LOAD_COMMENTS_REQUEST\";\nexport const LOAD_COMMENTS_SUCCESS = \"LOAD_COMMENTS_SUCCESS\";\nexport const LOAD_COMMENTS_FAILURE = \"LOAD_COMMENTS_FAILURE\";\n\nexport const RETWEET_REQUEST = \"RETWEET_REQUEST\";\nexport const RETWEET_SUCCESS = \"RETWEET_SUCCESS\";\nexport const RETWEET_FAILURE = \"RETWEET_FAILURE\";\n\nexport const REMOVE_POST_REQUEST = \"REMOVE_POST_REQUEST\";\nexport const REMOVE_POST_SUCCESS = \"REMOVE_POST_SUCCESS\";\nexport const REMOVE_POST_FAILURE = \"REMOVE_POST_FAILURE\";\n\nconst reducer = (state = initState, action) => {\n  switch (action.type) {\n    case RETWEET_REQUEST: {\n      return {\n        ...state\n      };\n    }\n    case RETWEET_SUCCESS: {\n      return {\n        ...state,\n        mainPosts: [action.data, ...state.mainPosts]\n      };\n    }\n    case RETWEET_FAILURE: {\n      return {\n        ...state\n      };\n    }\n    case LIKE_POST_REQUEST: {\n      return {\n        ...state\n      };\n    }\n    case LIKE_POST_SUCCESS: {\n      const postIndex = state.mainPosts.findIndex(\n        v => v.id === action.data.postId\n      );\n      const post = state.mainPosts[postIndex];\n      const Likers = [{ id: action.data.userId }, ...post.Likers];\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = { ...post, Likers };\n      return {\n        ...state,\n        mainPosts\n      };\n    }\n    case LIKE_POST_FAILURE: {\n      return {\n        ...state\n      };\n    }\n    case UNLIKE_POST_REQUEST: {\n      return {\n        ...state\n      };\n    }\n    case UNLIKE_POST_SUCCESS: {\n      const postIndex = state.mainPosts.findIndex(\n        v => v.id === action.data.postId\n      );\n      const post = state.mainPosts[postIndex];\n      const Likers = post.Likers.filter(v => v.id !== action.data.userId);\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = { ...post, Likers };\n      return {\n        ...state,\n        mainPosts\n      };\n    }\n    case UNLIKE_POST_FAILURE: {\n      return {\n        ...state\n      };\n    }\n\n    case UPLOAD_IMAGES_REQUEST:\n      return {\n        ...state\n      };\n    case UPLOAD_IMAGES_SUCCESS:\n      return {\n        ...state,\n        imagePaths: [...state.imagePaths, action.data]\n      };\n    case UPLOAD_IMAGES_FAILURE:\n      return {\n        ...state\n      };\n\n    case REMOVE_IMAGE:\n      return {\n        ...state,\n        imagePaths: state.imagePaths.filter((v, i) => i !== action.index)\n      };\n    case ADD_POST_REQUEST: {\n      return {\n        ...state, // 리액트는 스테이트가 변경 다시 렌더링 ...state로 새로운 객체를 (다른 참조) 만들어줘서 다시 렌더링 될 수 있게 한다\n        isAddingPost: true,\n        addPostError: \"\",\n        postAdded: false\n      };\n    }\n    case ADD_POST_SUCCESS: {\n      return {\n        ...state,\n        isAddingPost: false,\n        mainPosts: [action.data, ...state.mainPosts],\n        postAdded: true,\n        imagePaths: []\n      };\n    }\n    case ADD_POST_FAILURE: {\n      return {\n        ...state,\n        isAddingPost: false,\n        addPostError: action.error\n      };\n    }\n    case ADD_COMMENT_REQUEST:\n      return {\n        ...state, // 리액트는 스테이트가 변경 다시 렌더링 ...state로 새로운 객체를 (다른 참조) 만들어줘서 다시 렌더링 될 수 있게 한다\n        isAddingComment: true,\n        addCommentError: \"\",\n        commentAdded: false\n      };\n    case ADD_COMMENT_SUCCESS:\n      const postIndex = state.mainPosts.findIndex(\n        v => v.id === action.data.postId\n      );\n      const post = state.mainPosts[postIndex];\n      const Comments = [...post.Comments, action.data.comment];\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = { ...post, Comments };\n      return {\n        ...state,\n        isAddingComment: false,\n        mainPosts,\n        commentAdded: true\n      };\n    case ADD_COMMENT_FAILURE:\n      return {\n        ...state,\n        isAddingComment: false,\n        addCommentError: action.error\n        // commentAdded: false\n      };\n    case LOAD_COMMENTS_SUCCESS: {\n      const postIndex = state.mainPosts.findIndex(\n        v => v.id === action.data.postId\n      );\n      const post = state.mainPosts[postIndex];\n      const Comments = action.data.comments;\n      const mainPosts = [...state.mainPosts];\n      mainPosts[postIndex] = { ...post, Comments };\n      return {\n        ...state,\n        mainPosts\n      };\n    }\n    case LOAD_MAIN_POSTS_REQUEST:\n    case LOAD_HASHTAG_POSTS_REQUEST:\n    case LOAD_USER_POSTS_REQUEST:\n      return {\n        ...state, // 리액트는 스테이트가 변경 다시 렌더링 ...state로 새로운 객체를 (다른 참조) 만들어줘서 다시 렌더링 될 수 있게 한다\n        mainPosts: []\n      };\n    case LOAD_MAIN_POSTS_SUCCESS:\n    case LOAD_HASHTAG_POSTS_SUCCESS:\n    case LOAD_USER_POSTS_SUCCESS:\n      return {\n        ...state,\n        mainPosts: action.data\n      };\n    case LOAD_MAIN_POSTS_FAILURE:\n    case LOAD_HASHTAG_POSTS_FAILURE:\n    case LOAD_USER_POSTS_FAILURE:\n      return {\n        ...state\n      };\n\n    case REMOVE_POST_REQUEST: {\n      break;\n    }\n    case REMOVE_POST_SUCCESS: {\n      const index = draft.mainPosts.findIndex(v => v.id === action.data);\n      draft.mainPosts.splice(index, 1);\n      break;\n    }\n    case REMOVE_POST_FAILURE: {\n      break;\n    }\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAEA;AAAA;AAAA;AAFA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AALA;AAOA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAHA;AAKA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAJA;AACA;AAKA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAJA;AACA;AAKA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAFA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAFA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAFA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAtLA;AAwLA;AACA;AACA;;;;A","sourceRoot":""}